% COMPAREFOLIAGEDEPTHBASEDMODELS Implement a few foliage-depth based models
% and compare their performances.
%
% Yaguang Zhang, Purdue, 08/10/2018

clear; clc; close all;

%% Configurations

warning('on');

% Add libs to current path and set ABS_PATH_TO_NIST_SHARED_FOLDER according
% to the machine name.
cd(fileparts(mfilename('fullpath')));
addpath(fullfile(pwd));
cd('..'); setPath;

% We will need the functions latLon2PixIndices.m and pixIndices2LatLon.m
% for working with the vegArea image.
addpath(fullfile(pwd, '9_GenerateVegAreas'));

% Configure other paths accordingly.
ABS_PATH_TO_SAVE_PLOTS = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', 'FoliageDepthBasedModelsComparison');

% Reuse results from evalPathLossesForContiTracks.m and
% loadMeasCampaignInfo.m.
ABS_PATH_TO_PATH_LOSSES_FILE = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', 'PathLossComputationConti', ...
    'contiPathLossesWithGpsInfo.mat');
ABS_PATH_TO_TX_INFO_LOGS_FILE = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', 'PathLossComputation', 'txInfoLogs.mat');

% Reuse results from generateVegAreas.m.
ABS_PATH_TO_VEG_AREAS_FILE = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', 'AutoGeneratedVegAreas', 'vegAreasMeta.mat');

% Reuse results from estimateFoliageAttenuation.m.
ABS_PATH_TO_UTM_INFO_FILE = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', 'FoliageAttenuationEstimation', ...
    'utmInfoForPathLossesAndTrees.mat');

% Reuse results from estimateFoliageAttenuationWithManualTreeLocs.m.
ABS_PATH_TO_TREE_NUM_BASED_ANALYSIS_FILE ...
    = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, 'PostProcessingResults', ...
    'FoliageAttenuationEstimation_ManualTreeLocs', ...
    'foliageAttenAnalysisResults.mat');

% The lengths of path within woodland (for the ITU model) and site-specific
% foilage depths will be saved into a file.
pathToSaveModelInfo = fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'foliageDepthBasedAttenAnalysisResults.mat');

% The TX was installed around 15 meters away from the forest.
deltaLosDistToDistInWoodLand = -15;

%% Before Processing the Data

curFileName = mfilename;
fileNameHintRuler = [' ', repmat('-', 1, length(curFileName)+2), ' '];
disp(fileNameHintRuler)
disp(['  ', curFileName, '  '])
disp(fileNameHintRuler)

% Create directories if necessary.
if exist(ABS_PATH_TO_SAVE_PLOTS, 'dir')~=7
    mkdir(ABS_PATH_TO_SAVE_PLOTS);
end

%% Get Info for Measurement Data Files and Calibration Polynomials

disp(' ')
disp('    Loading results from: ')
disp('      - contiPathLossesWithGpsInfo.mat')
disp('      - txInfoLogs.mat')
disp('      - vegAreasMeta.mat')
disp('      - utmInfoForPathLossesAndTrees.mat')

assert(exist(ABS_PATH_TO_PATH_LOSSES_FILE, 'file')==2, ...
    'Couldn''t find contiPathLossesWithGpsInfo.mat! Please run PostProcessing/3_PathLossComputation/evalPathLossesForContiTracks.m first.');
assert(exist(ABS_PATH_TO_TX_INFO_LOGS_FILE, 'file')==2, ...
    'Couldn''t find txInfoLogs.mat! Please run PostProcessing/3_PathLossComputation/loadMeasCampaignInfo.m first.');
assert(exist(ABS_PATH_TO_VEG_AREAS_FILE, 'file')==2, ...
    'Couldn''t find vegAreasMeta.mat! Please run PostProcessing/9_GenerateVegAreas/generateVegAreas.m first.');
assert(exist(ABS_PATH_TO_UTM_INFO_FILE, 'file')==2, ...
    'Couldn''t find utmInfoForPathLossesAndTrees.mat! Please run PostProcessing/4_FoliageAttenuationEstimation/estimateFoliageAttenuation.m first.');
assert(exist(ABS_PATH_TO_TREE_NUM_BASED_ANALYSIS_FILE, 'file')==2, ...
    'Couldn''t find foliageAttenAnalysisResults.mat! Please run PostProcessing/8_FoliageAttenuationEstimation_ManualTreeLocs/estimateFoliageAttenuationWithManualTreeLocs.m first.');

% The data have been processed before and the result files have been found.
disp('    Found all .mat files required.');
disp('        Loading the results...')
% Get 'contiPathLossesWithGpsInfo', 'contiOutFilesRelPathsUnderDataFolder'
% and 'contiOutFileIndicesReflection'.
load(ABS_PATH_TO_PATH_LOSSES_FILE);
% Get records of the TxInfo.txt files (among other contant parameters for
% the measurement campaign, e.g. F_S, TX_LAT, TX_LON, and TX_POWER_DBM):
% 	'TX_INFO_LOGS' and 'TX_INFO_LOGS_ABS_PAR_DIRS'.
load(ABS_PATH_TO_TX_INFO_LOGS_FILE);
% Get 'vegAreas', 'LAT_RANGE', 'LON_RANGE', 'VEG_AREA_IMG_RESOLUTION', and
% 'VEG_AREA_IMG_META'.
load(ABS_PATH_TO_VEG_AREAS_FILE);
% Get 'xTx', 'yTx', 'txUtmZone', 'treeLocations', 'pathLossUtmXYHs',
% 'pathLossUtmZones', 'treeUtmXYHs', and 'treeUtmZones'.
load(ABS_PATH_TO_UTM_INFO_FILE);
% Get 'numsOfTreesInFirstFresnel', 'freeSpacePathLosses',
% 'exceLossRefFreeSpace', 'excePathLossPerTree',
% 'shiftedFreeSpacePathLosses', 'excePathLossGroupWise', and
% 'groupWiseShiftedFreeSpacePathLosses'.
load(ABS_PATH_TO_TREE_NUM_BASED_ANALYSIS_FILE);

disp('    Done!')

%% Models to Compare

disp(' ')
disp('    Defining models to compare... ')

% ITU-R P.833-9 obstruction by woodland model.
modelItuObsByWoodland.gammaRecommended = 6; % Specific attenuation in dB/m.
% The maximum attenuation Am (dB) need to be fitted according to our data;
% And d is the length of path within woodland.
modelItuObsByWoodland.excessLossFormula ...
    = @(d, gamma, Am) Am.*(1-exp(-d.*gamma./Am));

% Fit both gamma and Am to see how well the ITU model may behave.
modelItuObsByWoodlandBest.excessLossFormula ...
    = @(d, gamma, Am) Am.*(1-exp(-d.*gamma./Am));

% Weissberger's modified exponential decay model.
%   - d_f: Foliage depth along the LOS path in meters. - F: Frequency in
%   GHz.
modelModExpDecay.F_C_IN_GHZ = F_C_IN_GHZ;
modelModExpDecay.excessLossFormula = @(d_f, F) ...
    (14<d_f & d_f<=400).*1.33.*(F.^0.284).*(d_f.^0.588) ...
    +(0<d_f & d_f<=14).*0.45.*(F.^0.284).*d_f;

% The constant attenuation per unit of cite-specific foilage depth model.
%   - d_f: Foliage depth along the LOS path in meters.
modelConstLossPerUnitOfFoilageDepth.excessLossFormula ...
    = @(d_f, constVeg) constVeg.*d_f;

% The two-step constant attenuation per unit of cite-specific foilage depth
% model, which is motivated by the almost constant excessive loss for deep
% enough area in the forest. Parameters constVegClose, constVegFar, and
% boundary need to be gotten from our data set.
modelTwoStepConstLossPerUnitOfFoilageDepth.excessLossFormula ...
    = @(d_f, constVegClose, constVegFar, boundary) ...
    constVegClose.*(d_f-boundary)...
    +(d_f>boundary).*constVegFar.*(d_f-boundary);
modelTwoStepConstLossPerUnitOfFoilageDepth.boundaryFromModExpDecay = 14;

% The two-step constant attenuation for deep enough foliage model, which is
% motivated by the almost constant excessive loss for deep enough area in
% the forest. Parameters constVegand boundary need to be gotten from our
% data set.
modelTwoStepConstLossForDeepVeg.excessLossFormula ...
    = @(d_f, constVeg, boundary) (d_f>boundary).*constVeg;
modelTwoStepConstLossForDeepVeg.boundaryFromModExpDecay = 14;

% Save the models.
save(pathToSaveModelInfo, ...
    'modelItuObsByWoodland', ...
    'modelItuObsByWoodlandBest', ...
    'modelModExpDecay', ...
    'modelConstLossPerUnitOfFoilageDepth', ...
    'modelTwoStepConstLossPerUnitOfFoilageDepth', ...
    'modelTwoStepConstLossForDeepVeg');
disp('    Done!')

%% Voliage Depth Estimation

disp(' ')
disp('    Estimating site-specific foliage depth... ')

srcGpsPt = [TX_LAT, TX_LON];
numTracks = length(contiPathLossesWithGpsInfo);
losFoliageDepths = cell(numTracks, 1);
losDistsInWoodland = cell(numTracks, 1);

parfor idxTrack = 1:numTracks
    disp(['        Track #', num2str(idxTrack), ' ... '])
    [numSamps, ~] = size(contiPathLossesWithGpsInfo{idxTrack});
    dstGpsPts = contiPathLossesWithGpsInfo{idxTrack}(:,2:3);
    [curLosFoliageDepths, curLosDists] = arrayfun(@(idxGpsPt) ...
        estimateFoliageDepthGps( ...
        srcGpsPt, dstGpsPts(idxGpsPt,:)', vegAreas, VEG_AREA_IMG_META), ...
        1:numSamps);
    losFoliageDepths{idxTrack} = curLosFoliageDepths';
    losDistsInWoodland{idxTrack} = curLosDists' ...
        - deltaLosDistToDistInWoodLand;
end

% Save the results.
save(pathToSaveModelInfo, 'losFoliageDepths',...
    'losDistsInWoodland', 'deltaLosDistToDistInWoodLand', ...
    '-append');
disp('    Done!')

%% Fit the Modoles to NIST Data for Necessary Parameters

disp(' ')
disp('    Fitting parameters for under-determined models... ')

allContiPathLossesWithGpsInfo = vertcat(contiPathLossesWithGpsInfo{:});
allMeasPathLosses = allContiPathLossesWithGpsInfo(:,1);
allFreeSpacePathLosses = vertcat(freeSpacePathLosses{:});
allExceLosses = allMeasPathLosses - allFreeSpacePathLosses;

allLosDistsInWoodland = vertcat(losDistsInWoodland{:});
allFoliageDepths = vertcat(losFoliageDepths{:});

allNumsOfTreesInFirstFresnel = vertcat(numsOfTreesInFirstFresnel{:});

% For the ITU model, fit Am to our data.
fctToFit = @(amToFit, d) modelItuObsByWoodland.excessLossFormula( ...
    d, modelItuObsByWoodland.gammaRecommended, amToFit);
modelItuObsByWoodland.AmFitted = nlinfit( ...
    allLosDistsInWoodland, allExceLosses, ...
    fctToFit, rand(1));

% For the best possible ITU model, fit both gamma and Am to our data.
fctToFit = @(parasToFit, d) ...
    modelItuObsByWoodlandBest.excessLossFormula( ...
    d, parasToFit(1), parasToFit(2));
fittedRes = nlinfit( ...
    allLosDistsInWoodland, allExceLosses, ...
    fctToFit, ...
    [0.5, 40]);
modelItuObsByWoodlandBest.gammaFitted = fittedRes(1);
modelItuObsByWoodlandBest.AmFitted = fittedRes(2);

% For the constant loss per meter of foliage depth model.
fctToFit = @(constVegToFit, d) ...
    modelConstLossPerUnitOfFoilageDepth.excessLossFormula( ...
    d, constVegToFit);
modelConstLossPerUnitOfFoilageDepth.constVegFitted = nlinfit( ...
    allFoliageDepths, allExceLosses, ...
    fctToFit, rand(1));

% For the two-step constant loss per meter of foliage depth model.
fctToFit = @(parasToFit, d) ...
    modelTwoStepConstLossPerUnitOfFoilageDepth.excessLossFormula( ...
    d, parasToFit(1), parasToFit(2), ...
    modelTwoStepConstLossPerUnitOfFoilageDepth.boundaryFromModExpDecay);
fittedRes = nlinfit( ...
    allFoliageDepths, allExceLosses, ...
    fctToFit, rand(1,3));
modelTwoStepConstLossPerUnitOfFoilageDepth.constVegCloseFitted ...
    = fittedRes(1);
modelTwoStepConstLossPerUnitOfFoilageDepth.constVegFarFitted ...
    = fittedRes(2);

% For the two-step constant loss model.
fctToFit = @(parasToFit, d) ...
    modelTwoStepConstLossForDeepVeg.excessLossFormula( ...
    d, parasToFit, ...
    modelTwoStepConstLossForDeepVeg.boundaryFromModExpDecay);
fittedRes = nlinfit( ...
    allFoliageDepths, allExceLosses, ...
    fctToFit, rand(1));
modelTwoStepConstLossForDeepVeg.constVegFitted ...
    = fittedRes;

% Update the models.
save(pathToSaveModelInfo, ...
    'modelItuObsByWoodland', ...
    'modelItuObsByWoodlandBest', ...
    'modelConstLossPerUnitOfFoilageDepth', ...
    'modelTwoStepConstLossPerUnitOfFoilageDepth', ...
    'modelTwoStepConstLossForDeepVeg', '-append');
disp('    Done!')

%% Compute RMSEs

disp(' ')
disp('    Compute root mean square errors... ')

allPredictedPathLossesItu = allFreeSpacePathLosses ...
    + modelItuObsByWoodland.excessLossFormula( ...
    allLosDistsInWoodland, modelItuObsByWoodland.gammaRecommended, ...
    modelItuObsByWoodland.AmFitted);
allPredictedPathLossesItuBest = allFreeSpacePathLosses ...
    + modelItuObsByWoodlandBest.excessLossFormula( ...
    allLosDistsInWoodland, modelItuObsByWoodlandBest.gammaFitted, ...
    modelItuObsByWoodlandBest.AmFitted);
allPredictedPathLossesMod ...
    = allFreeSpacePathLosses ...
    + modelModExpDecay.excessLossFormula(allFoliageDepths, ...
    modelModExpDecay.F_C_IN_GHZ);
allPredictedPathLossesCon ...
    = allFreeSpacePathLosses ...
    + modelConstLossPerUnitOfFoilageDepth.excessLossFormula( ...
    allFoliageDepths, ...
    modelConstLossPerUnitOfFoilageDepth.constVegFitted);
allPredictedPathLossesTwoStepCon ...
    = allFreeSpacePathLosses ...
    + modelTwoStepConstLossPerUnitOfFoilageDepth.excessLossFormula( ...
    allFoliageDepths, ...
    modelTwoStepConstLossPerUnitOfFoilageDepth.constVegCloseFitted, ...
    modelTwoStepConstLossPerUnitOfFoilageDepth.constVegFarFitted, ...
    modelTwoStepConstLossPerUnitOfFoilageDepth.boundaryFromModExpDecay);
allPredictedPathLossesTwoStepConDeepVeg ...
    = allFreeSpacePathLosses ...
    + modelTwoStepConstLossForDeepVeg.excessLossFormula( ...
    allFoliageDepths, ...
    modelTwoStepConstLossForDeepVeg.constVegFitted, ...
    modelTwoStepConstLossForDeepVeg.boundaryFromModExpDecay);

rmseItu = sqrt(mean((allPredictedPathLossesItu - allMeasPathLosses).^2));
rmseItuBest = sqrt(mean( ...
    (allPredictedPathLossesItuBest - allMeasPathLosses).^2));
rmseMod = sqrt(mean((allPredictedPathLossesMod - allMeasPathLosses).^2));
rmseCon = sqrt(mean((allPredictedPathLossesCon - allMeasPathLosses).^2));
rmseTwoStepCon = sqrt(mean( ...
    (allPredictedPathLossesTwoStepCon - allMeasPathLosses).^2));
rmseTwoStepConDeepVeg = sqrt(mean( ...
    (allPredictedPathLossesTwoStepConDeepVeg - allMeasPathLosses).^2));

% Save the results to a .txt file.
dbLossFormatter = '%3.2f';
fFullPathRmse = fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'RmseComparisonsFoliageDepthBased.txt');
fIdRmse = fopen( fFullPathRmse, 'w');
fprintf(fIdRmse,'Model, RMSE(dB)\n');
% FSPL + ITU
fprintf(fIdRmse, ['FSPL with ITU obstruction by woodland loss, ', ...
    dbLossFormatter, '\r'], ...
    rmseItu);
% FSPL + ITU Best
fprintf(fIdRmse, ...
    ['FSPL with ITU obstruction by woodland loss (best possible), ', ...
    dbLossFormatter, '\r'], ...
    rmseItuBest);
% FSPL + modified exponential decay
fprintf(fIdRmse, ...
    ['FSPL with Weissberger''s modified exponential decay, ', ...
    dbLossFormatter, '\r'], ...
    rmseMod);
% FSPL + const extra loss per meter of foliage depth
fprintf(fIdRmse, ['FSPL with an extra loss per meter of foliage depth, ', ...
    dbLossFormatter, '\r'], ...
    rmseCon);
% FSPL + two-step const extra loss
fprintf(fIdRmse, ...
    ['FSPL with two-step extra loss per meter of foliage depth, ', ...
    dbLossFormatter, '\r'], ...
    rmseTwoStepCon);
% FSPL + two-step const extra loss for deep vegetation
fprintf(fIdRmse, ...
    ['FSPL with two-step extra loss for deep enough vegetation, ', ...
    dbLossFormatter, '\r'], ...
    rmseTwoStepConDeepVeg);

fclose(fIdRmse);

% Open the resulting file via Microsoft Code.
system(['code "' fFullPathRmse '"']);

disp('    Done!')

%% Plots

disp(' ')
disp('    Plotting... ')

% Foliage depths on map.
hFoliageDepthsOnMap = figure; hold on;
plot3(TX_LON, TX_LAT, TX_HEIGHT_M, '^g');
plot3k([allContiPathLossesWithGpsInfo(:,3), ...
    allContiPathLossesWithGpsInfo(:,2), allFoliageDepths], ...
    'PlotType', 'stem');
axis tight; curAxis = axis;
plot_google_map('MapType', 'satellite');
xlabel('Longitude'); ylabel('Latitude'); xticks([]); yticks([]);
zlabel('Foliage Depth (m)'); grid on;
% The command plot_google_map messes up the color legend of plot3k, so we
% will have to fix it here.
hCb = findall( allchild(hFoliageDepthsOnMap), 'type', 'colorbar');
hCb.Ticks = linspace(1,length(colormap)+1,length(hCb.TickLabels));
view(95, 70); axis(curAxis(1:4));

% Excess path loss over path length in woodland.
hExceLossVsPathLenInWoodland = figure; hold on;
plot(allLosDistsInWoodland, allExceLosses, '.');
grid on;
xlabel('Length of Path within Woodland (m)');
ylabel('Excess Path Loss (dB)');

% Excess path loss over foliage depth.
hExceLossVsFoliageDepth = figure; hold on;
plot(allFoliageDepths, allExceLosses, '.');
grid on;
xlabel('Foliage Depth (m)');
ylabel('Excess Path Loss (dB)');

% Path loss over distance in woodland.
hLossVsWoodlandDist = figure; hold on;
hMeas = plot(allLosDistsInWoodland, allMeasPathLosses, 'ob');
hItu = plot(allLosDistsInWoodland, allPredictedPathLossesItu, '*r');
hItuBest = plot(allLosDistsInWoodland, allPredictedPathLossesItuBest, '+k');
legend([hItu, hItuBest, hMeas], ...
    'ITU Obstruction by Woodland', ...
    'ITU Obstruction by Woodland (Best possible)', ...
    'Measurements', ...
    'Location', 'southeast');
transparentizeCurLegends;
grid on; xlabel('Length of Path within Woodland (m)');
ylabel('Path Loss (dB)');

% Path loss over foliage distance.
hLossVsFoilageDist = figure; hold on;
hMeas = plot(allFoliageDepths, allMeasPathLosses, 'ob');
hMod = plot(allFoliageDepths, allPredictedPathLossesMod, 'xg');
hCon = plot(allFoliageDepths, allPredictedPathLossesCon, '^y');
hTwoStepCon = plot(allFoliageDepths, ...
    allPredictedPathLossesTwoStepCon, '.k');
hTwoStepConDeepVeg = plot(allFoliageDepths, ...
    allPredictedPathLossesTwoStepConDeepVeg, '.r');
legend([hMod, hCon, hTwoStepCon, hTwoStepConDeepVeg, hMeas], ...
    'Weissberger''s modified exponential decay', ...
    'Constant loss per meter of foliage depth', ...
    'Two step constant loss per meter of foliage depth', ...
    'Two step constant loss for deep enough vegetation', ...
    'Measurements', 'Location', 'northwest');
transparentizeCurLegends;
grid on; xlabel('Foliage Depth (m)');
ylabel('Path Loss (dB)');

% Save the figures.
saveas(hFoliageDepthsOnMap, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'FoliageDepthsOnMap.fig'));
saveas(hFoliageDepthsOnMap, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'FoliageDepthsOnMap.png'));

saveas(hExceLossVsPathLenInWoodland, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'ExceLossVsPathLenInWoodland.fig'));
saveas(hExceLossVsPathLenInWoodland, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'ExceLossVsPathLenInWoodland.png'));
saveas(hExceLossVsFoliageDepth, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'ExceLossVsFoliageDepth.fig'));
saveas(hExceLossVsFoliageDepth, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'ExceLossVsFoliageDepth.png'));

saveas(hLossVsWoodlandDist, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'LossVsWoodlandDist.fig'));
saveas(hLossVsWoodlandDist, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'LossVsWoodlandDist.png'));
saveas(hLossVsFoilageDist, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'LossVsFoilageDist.fig'));
saveas(hLossVsFoilageDist, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'LossVsFoilageDist.png'));

disp('    Done!')

% EOF