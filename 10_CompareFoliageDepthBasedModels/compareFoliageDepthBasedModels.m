% COMPAREFOLIAGEDEPTHBASEDMODELS Implement a few foliage-depth based models
% and compare their performances.
%
% Yaguang Zhang, Purdue, 08/10/2018

clear; clc; close all;

%% Configurations

warning('on');

% Add libs to current path and set ABS_PATH_TO_NIST_SHARED_FOLDER according
% to the machine name.
cd(fileparts(mfilename('fullpath')));
addpath(fullfile(pwd));
cd('..'); setPath;

% We will need the functions latLon2PixIndices.m and pixIndices2LatLon.m
% for working with the vegArea image.
addpath(fullfile(pwd, '9_GenerateVegAreas'));

% Configure other paths accordingly.
ABS_PATH_TO_SAVE_PLOTS = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', 'FoliageDepthBasedModelsComparison');

% Reuse results from evalPathLossesForContiTracks.m and
% loadMeasCampaignInfo.m.
ABS_PATH_TO_PATH_LOSSES_FILE = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', 'PathLossComputationConti', ...
    'contiPathLossesWithGpsInfo.mat');
ABS_PATH_TO_TX_INFO_LOGS_FILE = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', 'PathLossComputation', 'txInfoLogs.mat');

% Reuse results from generateVegAreas.m.
ABS_PATH_TO_VEG_AREAS_FILE = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', 'AutoGeneratedVegAreas', 'vegAreasMeta.mat');

% Reuse results from estimateFoliageAttenuation.m.
ABS_PATH_TO_UTM_INFO_FILE = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', 'FoliageAttenuationEstimation', ...
    'utmInfoForPathLossesAndTrees.mat');

% Reuse results from estimateFoliageAttenuationWithManualTreeLocs.m.
ABS_PATH_TO_TREE_NUM_BASED_ANALYSIS_FILE ...
    = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, 'PostProcessingResults', ...
    'FoliageAttenuationEstimation_ManualTreeLocs', ...
    'foliageAttenAnalysisResults.mat');

% The lengths of path within woodland (for the ITU model) and site-specific
% foilage depths will be saved into a file.
pathToSaveModelInfo = fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'foliageDepthBasedAttenAnalysisResults.mat');

% The TX was installed around 15 meters away from the forest.
deltaLosDistToDistInWoodLand = -15;

% The 3 segment for length of path within woodland for evaluating the
% performance for the ITU model. Each segment will be the min and max
% values in the form of [min, max), i.e. including min but excluding max.
segmentsForRmseDw = {[0,30], [30,220], [220, inf]};

% The 3 segment for the foliage depth for evaluating the performance of
% Weissberger's model. Each segment will be the min and max values in the
% form of [min, max), i.e. including min but excluding max.
segmentsForRmseDf = {[0,15], [15,75], [75, inf]};

%% Before Processing the Data

curFileName = mfilename;
fileNameHintRuler = [' ', repmat('-', 1, length(curFileName)+2), ' '];
disp(fileNameHintRuler)
disp(['  ', curFileName, '  '])
disp(fileNameHintRuler)

% Create directories if necessary.
if exist(ABS_PATH_TO_SAVE_PLOTS, 'dir')~=7
    mkdir(ABS_PATH_TO_SAVE_PLOTS);
end

%% Get Info for Measurement Data Files and Calibration Polynomials

disp(' ')
disp('    Loading results from: ')
disp('      - contiPathLossesWithGpsInfo.mat')
disp('      - txInfoLogs.mat')
disp('      - vegAreasMeta.mat')
disp('      - utmInfoForPathLossesAndTrees.mat')

assert(exist(ABS_PATH_TO_PATH_LOSSES_FILE, 'file')==2, ...
    'Couldn''t find contiPathLossesWithGpsInfo.mat! Please run PostProcessing/3_PathLossComputation/evalPathLossesForContiTracks.m first.');
assert(exist(ABS_PATH_TO_TX_INFO_LOGS_FILE, 'file')==2, ...
    'Couldn''t find txInfoLogs.mat! Please run PostProcessing/3_PathLossComputation/loadMeasCampaignInfo.m first.');
assert(exist(ABS_PATH_TO_VEG_AREAS_FILE, 'file')==2, ...
    'Couldn''t find vegAreasMeta.mat! Please run PostProcessing/9_GenerateVegAreas/generateVegAreas.m first.');
assert(exist(ABS_PATH_TO_UTM_INFO_FILE, 'file')==2, ...
    'Couldn''t find utmInfoForPathLossesAndTrees.mat! Please run PostProcessing/4_FoliageAttenuationEstimation/estimateFoliageAttenuation.m first.');
assert(exist(ABS_PATH_TO_TREE_NUM_BASED_ANALYSIS_FILE, 'file')==2, ...
    'Couldn''t find foliageAttenAnalysisResults.mat! Please run PostProcessing/8_FoliageAttenuationEstimation_ManualTreeLocs/estimateFoliageAttenuationWithManualTreeLocs.m first.');

% The data have been processed before and the result files have been found.
disp('    Found all .mat files required.');
disp('        Loading the results...')
% Get 'contiPathLossesWithGpsInfo', 'contiOutFilesRelPathsUnderDataFolder'
% and 'contiOutFileIndicesReflection'.
load(ABS_PATH_TO_PATH_LOSSES_FILE);
% Get records of the TxInfo.txt files (among other contant parameters for
% the measurement campaign, e.g. F_S, TX_LAT, TX_LON, and TX_POWER_DBM):
% 	'TX_INFO_LOGS' and 'TX_INFO_LOGS_ABS_PAR_DIRS'.
load(ABS_PATH_TO_TX_INFO_LOGS_FILE);
% Get 'vegAreas', 'LAT_RANGE', 'LON_RANGE', 'VEG_AREA_IMG_RESOLUTION', and
% 'VEG_AREA_IMG_META'.
load(ABS_PATH_TO_VEG_AREAS_FILE);
% Get 'xTx', 'yTx', 'txUtmZone', 'treeLocations', 'pathLossUtmXYHs',
% 'pathLossUtmZones', 'treeUtmXYHs', and 'treeUtmZones'.
load(ABS_PATH_TO_UTM_INFO_FILE);
% Get 'numsOfTreesInFirstFresnel', 'freeSpacePathLosses',
% 'exceLossRefFreeSpace', 'excePathLossPerTree',
% 'shiftedFreeSpacePathLosses', 'excePathLossGroupWise', and
% 'groupWiseShiftedFreeSpacePathLosses'.
load(ABS_PATH_TO_TREE_NUM_BASED_ANALYSIS_FILE);

disp('    Done!')

%% Foliage Depth Estimation

disp(' ')
disp('    Estimating site-specific foliage information... ')

srcGpsPt = [TX_LAT, TX_LON];
srcGpsPt3D = [srcGpsPt, TX_ALT+TX_HEIGHT_M];
numTracks = length(contiPathLossesWithGpsInfo);

if exist(pathToSaveModelInfo, 'file')
    disp('        Found history results... ')
    disp('        Loading... ')
    load(pathToSaveModelInfo)
else
    
    disp(' ')
    disp('    Estimating foliage depth... ')
    
    [losFoliageDepths, losDistsInWoodland, losDists, ...
        numsOfFoliagePixelsInFirstFresnel, ...
        weightedNumsOfFoliagePixelsInFirstFresnel, ...
        numsOfNonFoliagePixelsInFirstFresnel, ...
        ratiosOfFoliageBlockInFirstFresnel] ...
        = deal(cell(numTracks, 1));
    
    parfor idxTrack = 1:numTracks
        disp(['        Track #', num2str(idxTrack), ' ... '])
        [numSamps, ~] = size(contiPathLossesWithGpsInfo{idxTrack});
        dstGpsPts = contiPathLossesWithGpsInfo{idxTrack}(:,2:3);
        [curLosFoliageDepths, curLosDists] = arrayfun(@(idxGpsPt) ...
            estimateFoliageDepthGps( ...
            srcGpsPt, dstGpsPts(idxGpsPt,:)', vegAreas, VEG_AREA_IMG_META), ...
            1:numSamps);
        losFoliageDepths{idxTrack} = curLosFoliageDepths';
        
        losDists{idxTrack} = curLosDists';
        % The length of path within woodland can not be negative.
        curLosDistsInWoodland = curLosDists' ...
            + deltaLosDistToDistInWoodLand;
        curLosDistsInWoodland(curLosDistsInWoodland<0)=0;
        losDistsInWoodland{idxTrack} = curLosDistsInWoodland;
    end
    
    disp('    Counting the foliage pixels in the 1st fresnel zone... ')
    for idxTrack = 1:numTracks
        disp(['        Track #', num2str(idxTrack), ' ... '])
        [numSamps, ~] = size(contiPathLossesWithGpsInfo{idxTrack});
        
        [curNumFoliagePixelsInFirstFresnelZone, ...
            curWeightedNumFoliagePixelsInFirstFresnelZone, ...
            curNumNonFoliagePixelsInFirstFresnelZone, ...
            curRatiosOfFoliageBlockInFirstFresnel] ...
            = deal(nan(numSamps, 1));
        
        % Also, count the foliage pixels in the 1st fresnel zone.
        curContiPathLossesWithGpsInfo ...
            = contiPathLossesWithGpsInfo{idxTrack};
        parfor idxSamp = 1:numSamps
            disp(['            Sample #', num2str(idxSamp), '/', ...
                num2str(numSamps), ' ... '])
            dstGpsPt3D ...
                = [curContiPathLossesWithGpsInfo(idxSamp,2:3), ...
                curContiPathLossesWithGpsInfo(idxSamp,4)+RX_HEIGHT_M]; %#ok<PFBNS>
            % Considering the RX height over the ground.
            [curNumFoliagePixelsInFirstFresnelZone(idxSamp), ...
                curFirstFresZone, curFirstFresRadii]...
                = countNumOfFoliagePixelsInFirstFresnelZone(...
                srcGpsPt3D, dstGpsPt3D, ...
                vegAreas, VEG_AREA_IMG_META, F_C_IN_GHZ);
            
            curNumPixelsFirstFresZone = sum(curFirstFresZone(:));
            curNumNonFoliagePixelsInFirstFresnelZone(idxSamp) = ...
                curNumPixelsFirstFresZone ...
                - curNumFoliagePixelsInFirstFresnelZone(idxSamp);
            curRatiosOfFoliageBlockInFirstFresnel(idxSamp) ...
                = curNumFoliagePixelsInFirstFresnelZone(idxSamp) ...
                ./curNumPixelsFirstFresZone;
            
            curWeightedNumFoliagePixelsInFirstFresnelZone(idxSamp) ...
                = sum( ...
                1./curFirstFresRadii( ...
                curFirstFresZone(:)&vegAreas(:)&(curFirstFresRadii(:)>0)) ...
                );
        end
        
        numsOfFoliagePixelsInFirstFresnel{idxTrack} ...
            = curNumFoliagePixelsInFirstFresnelZone;
        numsOfNonFoliagePixelsInFirstFresnel{idxTrack} ...
            = curNumNonFoliagePixelsInFirstFresnelZone;
        ratiosOfFoliageBlockInFirstFresnel{idxTrack} ...
            = curRatiosOfFoliageBlockInFirstFresnel;
        weightedNumsOfFoliagePixelsInFirstFresnel{idxTrack} ...
            = curWeightedNumFoliagePixelsInFirstFresnelZone;
    end
    
    % Save the results.
    save(pathToSaveModelInfo, 'losFoliageDepths',...
        'losDists', 'losDistsInWoodland', 'deltaLosDistToDistInWoodLand', ...
        'numsOfFoliagePixelsInFirstFresnel', ...
        'numsOfNonFoliagePixelsInFirstFresnel', ...
        'weightedNumsOfFoliagePixelsInFirstFresnel', ...
        'ratiosOfFoliageBlockInFirstFresnel');
end
disp('    Done!')

%% Models to Compare

disp(' ')
disp('    Defining models to compare... ')

% ITU-R P.833-9 obstruction by woodland model.
modelItuObsByWoodland.gammaRecommended = 6; % Specific attenuation in dB/m.
% The maximum attenuation Am (dB) need to be fitted according to our data;
% And d is the length of path within woodland.
modelItuObsByWoodland.excessLossFormula ...
    = @(d, gamma, Am) Am.*(1-exp(-d.*gamma./Am));

% Fit both gamma and Am to see how well the ITU model may behave.
modelItuObsByWoodlandBest.excessLossFormula ...
    = @(d, gamma, Am) Am.*(1-exp(-d.*gamma./Am));


% The ITU models applied to foliage depth.
modelItuModForFoliageDepth.excessLossFormula ...
    = @(d_f, gamma, Am) Am.*(1-exp(-d_f.*gamma./Am));

% Weissberger's modified exponential decay model.
%   - d_f: Foliage depth along the LOS path in meters. - F: Frequency in
%   GHz.
modelModExpDecay.F_C_IN_GHZ = F_C_IN_GHZ;
modelModExpDecay.excessLossFormula = @(d_f, F) ...
    (14<d_f & d_f<=400).*1.33.*(F.^0.284).*(d_f.^0.588) ...
    +(0<d_f & d_f<=14).*0.45.*(F.^0.284).*d_f;

% The constant attenuation per unit of cite-specific foilage depth model.
%   - d_f: Foliage depth along the LOS path in meters.
modelConstLossPerUnitOfFoilageDepth.excessLossFormula ...
    = @(d_f, constVeg) constVeg.*d_f;

% For two-step linear model with respect to foliage depth.
modelTwoStepLinearLossWrtFD.excessLossFormula ...
    = @(d_f, constPerUoFDClose, constPerUoFDFar, boundary, constShift) ...
    (d_f>0).*( ...
    d_f.*constPerUoFDClose ...
    + (d_f>boundary).*(constPerUoFDFar-constPerUoFDClose).*(d_f-boundary) ...
    + constShift) ...
    +(d_f==0).*0;

% The constant attenuation per unit of cite-specific foilage depth +
% constant attenuation per trunk within the 1st Fresnel zone model.
modelCLPerUoFAndCLPerT.excessLossFormula ...
    = @(d_f, constVeg, n_t, constEachTrunk) ...
    constVeg.*d_f+constEachTrunk.*n_t;

% The two-step constant attenuation per unit of cite-specific foilage depth
% model, which is motivated by the almost constant excessive loss for deep
% enough area in the forest. Parameters constVegClose, constVegFar, and
% boundary need to be gotten from our data set.
modelTwoStepConstLossPerUnitOfFoilageDepth.excessLossFormula ...
    = @(d_f, constVegClose, constVegFar, boundary) ...
    constVegClose.*d_f...
    +(d_f>boundary).*(constVegFar-constVegClose).*(d_f-boundary);

% The two-step constant attenuation per unit of cite-specific foilage depth
% model, except that the boundary is given.
modelTwoStepConstLossPerUnitOfFoilageDepthFixedB.excessLossFormula ...
    = @(d_f, constVegClose, constVegFar, boundary) ...
    constVegClose.*d_f...
    +(d_f>boundary).*(constVegFar-constVegClose).*(d_f-boundary);
modelTwoStepConstLossPerUnitOfFoilageDepthFixedB.boundaryFromModExpDecay = 14;

% The two-step constant attenuation per unit of doliage depth within a
% threshold and constant attenuation for deep enough vegetation (beyond
% that threshold) model. Parameters constVegClose and boundary need to be
% gotten from our data set.
modelTwoStepCLPerUoFAndCLForDEV.excessLossFormula ...
    = @(d_f, constVegClose, boundary) ...
    constVegClose.*d_f...
    -(d_f>boundary).*constVegClose.*(d_f-boundary);

% The two-step constant attenuation for deep enough foliage model, which is
% motivated by the almost constant excessive loss for deep enough area in
% the forest. Parameter constVegand needs to be gotten from our data set.
modelTwoStepConstLossForDeepVeg.excessLossFormula ...
    = @(d_f, constVeg, boundary) (d_f>boundary).*constVeg;
modelTwoStepConstLossForDeepVeg.boundaryFromModExpDecay = 14;

% The two-step constant attenuation for deep enough foliage model, plus
% constant attenuation for each tree in the 1st Fresnel zone. Parameters
% constVeg and constEachTrunk need to be gotten from our data set.
modelTwoStepConstLossForDeepVegWithConstLossEachTrunk.excessLossFormula ...
    = @(d_f, constVeg, n_t, constEachTrunk, boundary) ...
    (d_f>boundary).*constVeg + n_t.*constEachTrunk;
modelTwoStepConstLossForDeepVegWithConstLossEachTrunk ...
    .boundaryFromModExpDecay = 14;

% The two-step constant attenuation plus constant attenuation for each tree
% in the 1st Fresnel zone for shallow enough foliage model. Parameters
% constVeg and constEachTrunk need to be gotten from our data set.
modelTwoStepCLPerUoFForShallowVegAndCLPerT.excessLossFormula ...
    = @(d_f, constVeg, n_t, constEachTrunk, boundary) ...
    d_f.*constVeg - (d_f>boundary).*(d_f-boundary).*constVeg ...
    + n_t.*constEachTrunk;
modelTwoStepCLPerUoFForShallowVegAndCLPerT ...
    .boundaryFromModExpDecay = 14;

% For the constant loss for each unit of foliage area in the first Fresnel
% zone model. Essentially, we count the number of foliage pixels in the
% zone on the vegetation map and use that to estimate the foliage area.
modelCLPerUoFA.excessLossFormula ...
    = @(a_f, constPerUoFA) a_f.*constPerUoFA;

% For the constant loss for each unit of foliage area in the first Fresnel
% zone model with a shift.
modelCLPerUoFAShifted.excessLossFormula ...
    = @(a_f, constPerUoFA, constShift) a_f.*constPerUoFA+constShift;

% For the linear model with respect to foliage depth.
modelLinearLossWrtFD.excessLossFormula ...
    = @(d_f, constPerUoFD, constShift) ...
    (d_f>0).*(d_f.*constPerUoFD + constShift)+(d_f==0).*0;

% For the linear model with respect to foliage area in the first Fresnel
% zone.
modelLinearLossWrtFA.excessLossFormula ...
    = @(a_f, constPerUoFA, constShift) ...
    (a_f>0).*(a_f.*constPerUoFA + constShift)+(a_f==0).*0;

% For two-step linear model with respect to foliage area.
modelTwoStepLinearLossWrtFA.excessLossFormula ...
    = @(a_f, constPerUoFAClose, constPerUoFAFar, boundary, constShift) ...
    (a_f>0).*( ...
    a_f.*constPerUoFAClose ...
    + (a_f>boundary).*(constPerUoFAFar-constPerUoFAClose).*(a_f-boundary) ...
    + constShift) ...
    +(a_f==0).*0;

% For the constant losses for each trunk and each unit of foliage area in
% the first Fresnel zone model. Essentially, we count the number of foliage
% pixels in the zone on the vegetation map and use that to estimate the
% foliage area.
modelCLPerTAndCLPerUoFA.excessLossFormula = @(a_f, constPerUoFA, ...
    n_t, constEachTrunk) a_f.*constPerUoFA+n_t.*constEachTrunk;

% For the two-step constant loss for each unit of foliage area in the first
% Fresnel zone model. Essentially, we count the number of foliage pixels in
% the zone on the vegetation map and use that to estimate the foliage area.
modelTwoStepCLPerUoFA.excessLossFormula ...
    = @(a_f, constPerUoFAClose, constPerUoFAFar, boundary) ...
    a_f.*constPerUoFAClose ...
    +(a_f>boundary) ...
    .*(constPerUoFAFar-constPerUoFAClose).*(a_f-boundary);

% For the constant loss for each unit of foliage area in the first Fresnel
% plus constant loss for each unit of the non-foliage one.
modelRem.excessLossFormula = @(a_f, constPerUoFA, a_n, constPerUoNFA) ...
    a_f.*constPerUoFA ...
    + a_n.*constPerUoNFA;

% For the constant loss for each unit of foliage area in the first Fresnel
% plus constant loss for each log unit of the non-foliage one.
modelRemLogNFA.excessLossFormula ...
    = @(a_f, constPerUoFA, a_n, constPerUoNFA) ...
    a_f.*constPerUoFA ...
    + a_n.*log(constPerUoNFA+1);

% For the constant loss for each unit of weighted foliage area in the first
% Fresnel zone model. Essentially, we count the number of foliage pixels in
% the zone on the vegetation map and weight it by 1/(1stFresR).
modelCLPerUoWFA.excessLossFormula ...
    = @(a_wf, constPerUoWFA) a_wf.*constPerUoWFA;

% For the linear model with respect to weighted foliage area in the first
% Fresnel zone.
modelLinearLossWrtWFA.excessLossFormula ...
    = @(a_wf, constPerUoWFA, constShift) ...
    (a_wf>0).*(a_wf.*constPerUoWFA + constShift)+(a_wf==0).*0;

% For two-step linear model with respect to weighted foliage area in the
% first Fresnel zone.
modelTwoStepLinearLossWrtWFA.excessLossFormula ...
    = @(a_wf, constPerUoWFAClose, constPerUoWFAFar, boundary, constShift) ...
    (a_wf>0).*( ...
    a_wf.*constPerUoWFAClose ...
    + (a_wf>boundary).*(constPerUoWFAFar-constPerUoWFAClose).*(a_wf-boundary) ...
    + constShift) ...
    +(a_wf==0).*0;

disp('    Done!')

%% Fit the Modoles to NIST Data for Necessary Parameters

disp(' ')
disp('    Fitting parameters for under-determined models... ')

startingPtTwoStepLinearWrtFD = [0.6 0.1 19.99 20];
startingPtTwoStepLinearWrtFA = [1 0.1 18 30];
startingPtTwoStepLinearWrtWFA = [0.3 0.05 40 20];

allContiPathLossesWithGpsInfo = vertcat(contiPathLossesWithGpsInfo{:});
allMeasPathLosses = allContiPathLossesWithGpsInfo(:,1);
allFreeSpacePathLosses = vertcat(freeSpacePathLosses{:});
allExceLosses = allMeasPathLosses - allFreeSpacePathLosses;

allLosDistsInWoodland = vertcat(losDistsInWoodland{:});
allFoliageDepths = vertcat(losFoliageDepths{:});

allNumsOfTreesInFirstFresnel = vertcat(numsOfTreesInFirstFresnel{:});
allNumsOfFoliagePixelsInFirstFresnel ...
    = vertcat(numsOfFoliagePixelsInFirstFresnel{:});
allFoliageAreasInFirstFresnel = allNumsOfFoliagePixelsInFirstFresnel ...
    .*VEG_AREA_IMG_META.GRID_SIZE_IN_METER(1) ...
    .*VEG_AREA_IMG_META.GRID_SIZE_IN_METER(2);

allRatiosOfFoliageBlockInFirstFresnel ...
    = vertcat(ratiosOfFoliageBlockInFirstFresnel{:});
allNonFoliageAreasInFirstFresnel ...
    = vertcat(ratiosOfFoliageBlockInFirstFresnel{:});

allWeightedNumsOfFoliagePixelsInFirstFresnel ...
    = vertcat(weightedNumsOfFoliagePixelsInFirstFresnel{:});
allWeightedFoliageAreasInFirstFresnel ...
    = allWeightedNumsOfFoliagePixelsInFirstFresnel ...
    .*VEG_AREA_IMG_META.GRID_SIZE_IN_METER(1) ...
    .*VEG_AREA_IMG_META.GRID_SIZE_IN_METER(2);

% For the ITU model, fit Am to our data.
fctToFit = @(amToFit, d) modelItuObsByWoodland.excessLossFormula( ...
    d, modelItuObsByWoodland.gammaRecommended, amToFit);
modelItuObsByWoodland.AmFitted = nlinfit( ...
    allLosDistsInWoodland, allExceLosses, ...
    fctToFit, rand(1));

% For the best possible ITU model, fit both gamma and Am to our data.
fctToFit = @(parasToFit, d) ...
    modelItuObsByWoodlandBest.excessLossFormula( ...
    d, parasToFit(1), parasToFit(2));
fittedRes = nlinfit( ...
    allLosDistsInWoodland, allExceLosses, ...
    fctToFit, ...
    [0.5, 40]);
modelItuObsByWoodlandBest.gammaFitted = fittedRes(1);
modelItuObsByWoodlandBest.AmFitted = fittedRes(2);

% For the ITU model applied on foliage depth, fit both gamma and Am to our
% data.
fctToFit = @(parasToFit, d) ...
    modelItuModForFoliageDepth.excessLossFormula( ...
    d, parasToFit(1), parasToFit(2));
fittedRes = nlinfit( ...
    allFoliageDepths, allExceLosses, ...
    fctToFit, ...
    [0.5, 40]);
modelItuModForFoliageDepth.gammaFitted = fittedRes(1);
modelItuModForFoliageDepth.AmFitted = fittedRes(2);

% For the constant loss per meter of foliage depth model.
fctToFit = @(constVegToFit, d) ...
    modelConstLossPerUnitOfFoilageDepth.excessLossFormula( ...
    d, constVegToFit);
modelConstLossPerUnitOfFoilageDepth.constVegFitted = nlinfit( ...
    allFoliageDepths, allExceLosses, ...
    fctToFit, rand(1));

% For the constant loss per meter of foliage depth plus constant loss per
% tree model.
fctToFit = @(parasToFit, inputs) ...
    modelCLPerUoFAndCLPerT.excessLossFormula( ...
    inputs(:,1), parasToFit(1), inputs(:,2), parasToFit(2));
fittedRes = nlinfit( ...
    [allFoliageDepths, allNumsOfTreesInFirstFresnel], allExceLosses, ...
    fctToFit, rand(1,2));
modelCLPerUoFAndCLPerT.constVegFitted ...
    = fittedRes(1);
modelCLPerUoFAndCLPerT ...
    .constEachTrunkFitted ...
    = fittedRes(2);

% For the two-step constant loss per meter of foliage depth model.
fctToFit = @(parasToFit, d) ...
    modelTwoStepConstLossPerUnitOfFoilageDepth.excessLossFormula( ...
    d, parasToFit(1), parasToFit(2), ...
    parasToFit(3));
fittedRes = nlinfit( ...
    allFoliageDepths, allExceLosses, ...
    fctToFit, [2 0.5 20]);
modelTwoStepConstLossPerUnitOfFoilageDepth.constVegCloseFitted ...
    = fittedRes(1);
modelTwoStepConstLossPerUnitOfFoilageDepth.constVegFarFitted ...
    = fittedRes(2);
modelTwoStepConstLossPerUnitOfFoilageDepth.boundaryFitted ...
    = fittedRes(3);

% For the two-step constant loss per meter of foliage depth model with
% fixed boundary.
fctToFit = @(parasToFit, d) ...
    modelTwoStepConstLossPerUnitOfFoilageDepthFixedB.excessLossFormula( ...
    d, parasToFit(1), parasToFit(2), ...
    modelTwoStepConstLossPerUnitOfFoilageDepthFixedB.boundaryFromModExpDecay);
fittedRes = nlinfit( ...
    allFoliageDepths, allExceLosses, ...
    fctToFit, [2 0.5]);
modelTwoStepConstLossPerUnitOfFoilageDepthFixedB.constVegCloseFitted ...
    = fittedRes(1);
modelTwoStepConstLossPerUnitOfFoilageDepthFixedB.constVegFarFitted ...
    = fittedRes(2);

% For two-step linear model with respect to foliage depth.
fctToFit = @(paraToFit, input) ...
    modelTwoStepLinearLossWrtFD ...
    .excessLossFormula( ...
    input, paraToFit(1), paraToFit(2), paraToFit(3), paraToFit(4));
fittedRes = nlinfit( ...
    allFoliageDepths, ...
    allExceLosses, ...
    fctToFit, startingPtTwoStepLinearWrtFD);
modelTwoStepLinearLossWrtFD.constPerUoFDCloseFitted = fittedRes(1);
modelTwoStepLinearLossWrtFD.constPerUoFDFarFitted = fittedRes(2);
modelTwoStepLinearLossWrtFD.boundaryFitted = fittedRes(3);
modelTwoStepLinearLossWrtFD.constShiftFitted = fittedRes(4);

% For the two-step constant loss per meter of foliage depth and constant
% loss for deep enough vegetation model.
fctToFit = @(parasToFit, d) ...
    modelTwoStepCLPerUoFAndCLForDEV.excessLossFormula( ...
    d, parasToFit(1), parasToFit(2));
fittedRes = nlinfit( ...
    allFoliageDepths, allExceLosses, ...
    fctToFit, [rand(1),14]);
modelTwoStepCLPerUoFAndCLForDEV.constVegCloseFitted ...
    = fittedRes(1);
modelTwoStepCLPerUoFAndCLForDEV.boundaryFitted ...
    = fittedRes(2);

% For the two-step constant loss model.
fctToFit = @(parasToFit, d) ...
    modelTwoStepConstLossForDeepVeg.excessLossFormula( ...
    d, parasToFit, ...
    modelTwoStepConstLossForDeepVeg.boundaryFromModExpDecay);
fittedRes = nlinfit( ...
    allFoliageDepths, allExceLosses, ...
    fctToFit, rand(1));
modelTwoStepConstLossForDeepVeg.constVegFitted ...
    = fittedRes;

% For the two-step constant loss with constant loss per truck model.
fctToFit = @(parasToFit, inputs) ...
    modelTwoStepConstLossForDeepVegWithConstLossEachTrunk ...
    .excessLossFormula( ...
    inputs(:,1), parasToFit(1), inputs(:,2), parasToFit(2), ...
    modelTwoStepConstLossForDeepVegWithConstLossEachTrunk ...
    .boundaryFromModExpDecay);
fittedRes = nlinfit( ...
    [allFoliageDepths, allNumsOfTreesInFirstFresnel], allExceLosses, ...
    fctToFit, rand(1,2));
modelTwoStepConstLossForDeepVegWithConstLossEachTrunk.constVegFitted ...
    = fittedRes(1);
modelTwoStepConstLossForDeepVegWithConstLossEachTrunk ...
    .constEachTrunkFitted ...
    = fittedRes(2);

% For the two-step constant loss per unit of foliage depth for shallow
% enough vegetation with constant loss per truck model.
fctToFit = @(parasToFit, inputs) ...
    modelTwoStepCLPerUoFForShallowVegAndCLPerT ...
    .excessLossFormula( ...
    inputs(:,1), parasToFit(1), inputs(:,2), parasToFit(2), ...
    modelTwoStepCLPerUoFForShallowVegAndCLPerT ...
    .boundaryFromModExpDecay);
fittedRes = nlinfit( ...
    [allFoliageDepths, allNumsOfTreesInFirstFresnel], allExceLosses, ...
    fctToFit, rand(1,2));
modelTwoStepCLPerUoFForShallowVegAndCLPerT.constVegFitted ...
    = fittedRes(1);
modelTwoStepCLPerUoFForShallowVegAndCLPerT ...
    .constEachTrunkFitted ...
    = fittedRes(2);

% For the constant loss for each unit of foliage area in the first Fresnel
% zone model.
fctToFit = @(paraToFit, input) ...
    modelCLPerUoFA ...
    .excessLossFormula( ...
    input, paraToFit);
fittedRes = nlinfit( ...
    allFoliageAreasInFirstFresnel, ...
    allExceLosses, ...
    fctToFit, rand(1));
modelCLPerUoFA.constPerUoFAFitted ...
    = fittedRes;

% For the constant loss for each unit of foliage area in the first Fresnel
% zone model with a shift.
fctToFit = @(paraToFit, input) ...
    modelCLPerUoFAShifted ...
    .excessLossFormula( ...
    input, paraToFit(1), paraToFit(2));
fittedRes = nlinfit( ...
    allFoliageAreasInFirstFresnel, ...
    allExceLosses, ...
    fctToFit, rand(1,2));
modelCLPerUoFAShifted.constPerUoFAFitted = fittedRes(1);
modelCLPerUoFAShifted.constShiftFitted = fittedRes(2);

% For the linear model with respect to foliage depth.
fctToFit = @(paraToFit, input) ...
    modelLinearLossWrtFD ...
    .excessLossFormula( ...
    input, paraToFit(1), paraToFit(2));
fittedRes = nlinfit( ...
    allFoliageDepths, ...
    allExceLosses, ...
    fctToFit, rand(1,2));
modelLinearLossWrtFD.constPerUoFDFitted = fittedRes(1);
modelLinearLossWrtFD.constShiftFitted = fittedRes(2);

% For the linear model with respect to foliage area.
fctToFit = @(paraToFit, input) ...
    modelLinearLossWrtFA ...
    .excessLossFormula( ...
    input, paraToFit(1), paraToFit(2));
fittedRes = nlinfit( ...
    allFoliageAreasInFirstFresnel, ...
    allExceLosses, ...
    fctToFit, rand(1,2));
modelLinearLossWrtFA.constPerUoFAFitted = fittedRes(1);
modelLinearLossWrtFA.constShiftFitted = fittedRes(2);

% For two-step linear model for foliage area.
fctToFit = @(paraToFit, input) ...
    modelTwoStepLinearLossWrtFA ...
    .excessLossFormula( ...
    input, paraToFit(1), paraToFit(2), paraToFit(3), paraToFit(4));
fittedRes = nlinfit( ...
    allFoliageAreasInFirstFresnel, ...
    allExceLosses, ...
    fctToFit, startingPtTwoStepLinearWrtFA);
modelTwoStepLinearLossWrtFA.constPerUoFACloseFitted = fittedRes(1);
modelTwoStepLinearLossWrtFA.constPerUoFAFarFitted = fittedRes(2);
modelTwoStepLinearLossWrtFA.boundaryFitted = fittedRes(3);
modelTwoStepLinearLossWrtFA.constShiftFitted = fittedRes(4);

% For the constant losses for each trunk and each unit of foliage area in
% the first Fresnel zone model.
fctToFit = @(parasToFit, inputs) ...
    modelCLPerTAndCLPerUoFA ...
    .excessLossFormula( ...
    inputs(:,1), parasToFit(1), inputs(:,2), parasToFit(2));
fittedRes = nlinfit( ...
    [allFoliageAreasInFirstFresnel, ...
    allNumsOfTreesInFirstFresnel], ...
    allExceLosses, ...
    fctToFit, rand(1,2));
modelCLPerTAndCLPerUoFA.constPerUoFAFitted ...
    = fittedRes(1);
modelCLPerTAndCLPerUoFA ...
    .constEachTrunkFitted ...
    = fittedRes(2);

% For the constant loss for each unit of foliage area in the first Fresnel
% zone model.
fctToFit = @(paraToFit, input) ...
    modelCLPerUoFA ...
    .excessLossFormula( ...
    input, paraToFit);
fittedRes = nlinfit( ...
    allFoliageAreasInFirstFresnel, ...
    allExceLosses, ...
    fctToFit, rand(1));
modelCLPerUoFA.constPerUoFAFitted ...
    = fittedRes;

% For the two-step constant loss for each unit of foliage area in the first
% Fresnel zone model.
modelTwoStepCLPerUoFA.boundaryFitted = 0.1;
fctToFit = @(parasToFit, a) ...
    modelTwoStepCLPerUoFA.excessLossFormula( ...
    a, parasToFit(1), parasToFit(2), ...
    modelTwoStepCLPerUoFA.boundaryFitted);
fittedRes = nlinfit( ...
    allFoliageAreasInFirstFresnel, allExceLosses, ...
    fctToFit, rand(1, 2));
modelTwoStepCLPerUoFA.constPerUoFACloseFitted ...
    = fittedRes(1);
modelTwoStepCLPerUoFA.constPerUoFAFarFitted ...
    = fittedRes(2);

% For the constant loss for each unit of foliage area in the first Fresnel
% plus constant loss for each unit of the non-foliage one.
fctToFit = @(parasToFit, inputs) ...
    modelRem.excessLossFormula( ...
    inputs(:,1), parasToFit(1), inputs(:,2), parasToFit(2));
fittedRes = nlinfit( ...
    [allFoliageAreasInFirstFresnel, ...
    allNonFoliageAreasInFirstFresnel], allExceLosses, ...
    fctToFit, rand(1, 2));
modelRem.constPerUoFAFitted ...
    = fittedRes(1);
modelRem.constPerUoNFAFitted ...
    = fittedRes(2);

% For the constant loss for each unit of foliage area in the first Fresnel
% plus constant loss for each log unit of the non-foliage one.
fctToFit = @(parasToFit, inputs) ...
    modelRemLogNFA.excessLossFormula( ...
    inputs(:,1), parasToFit(1), inputs(:,2), parasToFit(2));
fittedRes = nlinfit( ...
    [allFoliageAreasInFirstFresnel, ...
    allNonFoliageAreasInFirstFresnel], allExceLosses, ...
    fctToFit, rand(1, 2));
modelRemLogNFA.constPerUoFAFitted ...
    = fittedRes(1);
modelRemLogNFA.constPerUoNFAFitted ...
    = fittedRes(2);

% For the constant loss for each unit of weighted foliage area in the first
% Fresnel zone.
fctToFit = @(paraToFit, input) ...
    modelCLPerUoWFA ...
    .excessLossFormula( ...
    input, paraToFit);
fittedRes = nlinfit( ...
    allWeightedFoliageAreasInFirstFresnel, ...
    allExceLosses, ...
    fctToFit, rand(1));
modelCLPerUoWFA.constPerUoWFAFitted ...
    = fittedRes;

% For the linear model with respect to weighted foliage area in the first
% Fresnel zone.
fctToFit = @(paraToFit, input) ...
    modelLinearLossWrtWFA ...
    .excessLossFormula( ...
    input, paraToFit(1), paraToFit(2));
fittedRes = nlinfit( ...
    allWeightedFoliageAreasInFirstFresnel, ...
    allExceLosses, ...
    fctToFit, rand(1,2));
modelLinearLossWrtWFA.constPerUoWFAFitted = fittedRes(1);
modelLinearLossWrtWFA.constShiftFitted = fittedRes(2);

% For two-step linear model for weighted foliage area in the first Fresnel
% zone.
fctToFit = @(paraToFit, input) ...
    modelTwoStepLinearLossWrtWFA ...
    .excessLossFormula( ...
    input, paraToFit(1), paraToFit(2), paraToFit(3), paraToFit(4));
fittedRes = nlinfit( ...
    allWeightedFoliageAreasInFirstFresnel, ...
    allExceLosses, ...
    fctToFit, startingPtTwoStepLinearWrtWFA);
modelTwoStepLinearLossWrtWFA.constPerUoWFACloseFitted = fittedRes(1);
modelTwoStepLinearLossWrtWFA.constPerUoWFAFarFitted = fittedRes(2);
modelTwoStepLinearLossWrtWFA.boundaryFitted = fittedRes(3);
modelTwoStepLinearLossWrtWFA.constShiftFitted = fittedRes(4);


% Update the models.
save(pathToSaveModelInfo, ...
    'modelItuObsByWoodland', ...
    'modelItuObsByWoodlandBest', ...
    'modelItuModForFoliageDepth', ...
    'modelModExpDecay', ...
    'modelConstLossPerUnitOfFoilageDepth', ...
    'modelCLPerUoFAndCLPerT', ...
    'modelTwoStepConstLossPerUnitOfFoilageDepth', ...
    'modelLinearLossWrtFD', ...
    'modelTwoStepLinearLossWrtFD', ...
    'modelTwoStepConstLossPerUnitOfFoilageDepthFixedB', ...
    'modelTwoStepCLPerUoFAndCLForDEV', ...
    'modelTwoStepConstLossForDeepVeg', ...
    'modelTwoStepConstLossForDeepVegWithConstLossEachTrunk', ...
    'modelTwoStepCLPerUoFForShallowVegAndCLPerT', ...
    'modelCLPerUoFA', ...
    'modelLinearLossWrtFA', ...
    'modelTwoStepLinearLossWrtFA', ...
    'modelCLPerUoWFA', ...
    'modelLinearLossWrtWFA', ...
    'modelTwoStepLinearLossWrtWFA', ...
    'modelCLPerUoFAShifted', ...
    'modelTwoStepCLPerUoFA', ...
    'modelCLPerTAndCLPerUoFA', ...
    'modelRem', ...
    'modelRemLogNFA', ...
    '-append');
disp('    Done!')

%% Compute RMSEs

disp(' ')
disp('    Compute root mean square errors... ')

allPredictedPathLossesItu = allFreeSpacePathLosses ...
    + modelItuObsByWoodland.excessLossFormula( ...
    allLosDistsInWoodland, modelItuObsByWoodland.gammaRecommended, ...
    modelItuObsByWoodland.AmFitted);
allPredictedPathLossesItuBest = allFreeSpacePathLosses ...
    + modelItuObsByWoodlandBest.excessLossFormula( ...
    allLosDistsInWoodland, modelItuObsByWoodlandBest.gammaFitted, ...
    modelItuObsByWoodlandBest.AmFitted);
allPredictedPathLossesItuModForFoliageDepth = allFreeSpacePathLosses ...
    + modelItuModForFoliageDepth.excessLossFormula( ...
    allFoliageDepths, modelItuModForFoliageDepth.gammaFitted, ...
    modelItuModForFoliageDepth.AmFitted);
allPredictedPathLossesMod ...
    = allFreeSpacePathLosses ...
    + modelModExpDecay.excessLossFormula(allFoliageDepths, ...
    modelModExpDecay.F_C_IN_GHZ);
allPredictedPathLossesCon ...
    = allFreeSpacePathLosses ...
    + modelConstLossPerUnitOfFoilageDepth.excessLossFormula( ...
    allFoliageDepths, ...
    modelConstLossPerUnitOfFoilageDepth.constVegFitted);
allPredictedPathLossesCLPerUoFAndCLPerT ...
    = allFreeSpacePathLosses ...
    + modelCLPerUoFAndCLPerT.excessLossFormula( ...
    allFoliageDepths, ...
    modelCLPerUoFAndCLPerT.constVegFitted, ...
    allNumsOfTreesInFirstFresnel, ...
    modelCLPerUoFAndCLPerT.constEachTrunkFitted);
allPredictedPathLossesTwoStepCon ...
    = allFreeSpacePathLosses ...
    + modelTwoStepConstLossPerUnitOfFoilageDepth.excessLossFormula( ...
    allFoliageDepths, ...
    modelTwoStepConstLossPerUnitOfFoilageDepth.constVegCloseFitted, ...
    modelTwoStepConstLossPerUnitOfFoilageDepth.constVegFarFitted, ...
    modelTwoStepConstLossPerUnitOfFoilageDepth.boundaryFitted);
allPredictedPathLossesTwoStepLinearLossWrtFD ...
    = allFreeSpacePathLosses ...
    + modelTwoStepLinearLossWrtFD ...
    .excessLossFormula( ...
    allFoliageAreasInFirstFresnel, ...
    modelTwoStepLinearLossWrtFD ...
    .constPerUoFDCloseFitted, ...
    modelTwoStepLinearLossWrtFD ...
    .constPerUoFDFarFitted, ...
    modelTwoStepLinearLossWrtFD ...
    .boundaryFitted, ...
    modelTwoStepLinearLossWrtFD.constShiftFitted);
allPredictedPathLossesTwoStepConFixedB ...
    = allFreeSpacePathLosses ...
    + modelTwoStepConstLossPerUnitOfFoilageDepthFixedB.excessLossFormula( ...
    allFoliageDepths, ...
    modelTwoStepConstLossPerUnitOfFoilageDepthFixedB.constVegCloseFitted, ...
    modelTwoStepConstLossPerUnitOfFoilageDepthFixedB.constVegFarFitted, ...
    modelTwoStepConstLossPerUnitOfFoilageDepthFixedB.boundaryFromModExpDecay);
allPredictedPathLossesTwoStepCLPerUoFAndCLForDEV ...
    = allFreeSpacePathLosses ...
    + modelTwoStepCLPerUoFAndCLForDEV.excessLossFormula( ...
    allFoliageDepths, ...
    modelTwoStepCLPerUoFAndCLForDEV.constVegCloseFitted, ...
    modelTwoStepCLPerUoFAndCLForDEV.boundaryFitted);
allPredictedPathLossesTwoStepConDeepVeg ...
    = allFreeSpacePathLosses ...
    + modelTwoStepConstLossForDeepVeg.excessLossFormula( ...
    allFoliageDepths, ...
    modelTwoStepConstLossForDeepVeg.constVegFitted, ...
    modelTwoStepConstLossForDeepVeg.boundaryFromModExpDecay);
allPredictedPathLossesTwoStepConDeepVegWithConstLossEachTrunk ...
    = allFreeSpacePathLosses ...
    + modelTwoStepConstLossForDeepVegWithConstLossEachTrunk ...
    .excessLossFormula( ...
    allFoliageDepths, ...
    modelTwoStepConstLossForDeepVegWithConstLossEachTrunk ...
    .constVegFitted, ...
    allNumsOfTreesInFirstFresnel, ...
    modelTwoStepConstLossForDeepVegWithConstLossEachTrunk ...
    .constEachTrunkFitted, ...
    modelTwoStepConstLossForDeepVegWithConstLossEachTrunk ...
    .boundaryFromModExpDecay);
allPredictedPathLossesTwoStepCLPerUoFForShallowVegAndCLPerT ...
    = allFreeSpacePathLosses ...
    + modelTwoStepCLPerUoFForShallowVegAndCLPerT ...
    .excessLossFormula( ...
    allFoliageDepths, ...
    modelTwoStepCLPerUoFForShallowVegAndCLPerT ...
    .constVegFitted, ...
    allNumsOfTreesInFirstFresnel, ...
    modelTwoStepCLPerUoFForShallowVegAndCLPerT ...
    .constEachTrunkFitted, ...
    modelTwoStepCLPerUoFForShallowVegAndCLPerT ...
    .boundaryFromModExpDecay);
allPredictedPathLossesCLPerUoFA ...
    = allFreeSpacePathLosses ...
    + modelCLPerUoFA ...
    .excessLossFormula( ...
    allFoliageAreasInFirstFresnel, ...
    modelCLPerUoFA ...
    .constPerUoFAFitted);
allPredictedPathLossesCLPerUoFAShifted ...
    = allFreeSpacePathLosses ...
    + modelCLPerUoFAShifted ...
    .excessLossFormula( ...
    allFoliageAreasInFirstFresnel, ...
    modelCLPerUoFAShifted ...
    .constPerUoFAFitted, ...
    modelCLPerUoFAShifted.constShiftFitted);
allPredictedPathLossesLinearLossWrtFD ...
    = allFreeSpacePathLosses ...
    + modelLinearLossWrtFD ...
    .excessLossFormula( ...
    allFoliageAreasInFirstFresnel, ...
    modelLinearLossWrtFD ...
    .constPerUoFDFitted, ...
    modelLinearLossWrtFD.constShiftFitted);
allPredictedPathLossesLinearLossWrtFA ...
    = allFreeSpacePathLosses ...
    + modelLinearLossWrtFA ...
    .excessLossFormula( ...
    allFoliageAreasInFirstFresnel, ...
    modelLinearLossWrtFA ...
    .constPerUoFAFitted, ...
    modelLinearLossWrtFA.constShiftFitted);
allPredictedPathLossesTwoStepLinearLossWrtFA ...
    = allFreeSpacePathLosses ...
    + modelTwoStepLinearLossWrtFA ...
    .excessLossFormula( ...
    allFoliageAreasInFirstFresnel, ...
    modelTwoStepLinearLossWrtFA ...
    .constPerUoFACloseFitted, ...
    modelTwoStepLinearLossWrtFA ...
    .constPerUoFAFarFitted, ...
    modelTwoStepLinearLossWrtFA ...
    .boundaryFitted, ...
    modelTwoStepLinearLossWrtFA.constShiftFitted);
allPredictedPathLossesTwoStepCLPerUoFA ...
    = allFreeSpacePathLosses ...
    + modelTwoStepCLPerUoFA ...
    .excessLossFormula( ...
    allFoliageAreasInFirstFresnel, ...
    modelTwoStepCLPerUoFA.constPerUoFACloseFitted, ...
    modelTwoStepCLPerUoFA.constPerUoFAFarFitted, ...
    modelTwoStepCLPerUoFA.boundaryFitted);
allPredictedPathLossesCLPerTAndCLPerUoFA ...
    = allFreeSpacePathLosses ...
    + modelCLPerTAndCLPerUoFA ...
    .excessLossFormula( ...
    allFoliageAreasInFirstFresnel, ...
    modelCLPerTAndCLPerUoFA ...
    .constPerUoFAFitted, ...
    allNumsOfTreesInFirstFresnel, ...
    modelCLPerTAndCLPerUoFA ...
    .constEachTrunkFitted);
allPredictedPathLossesRem ...
    = allFreeSpacePathLosses ...
    + modelRem ...
    .excessLossFormula( ...
    allFoliageAreasInFirstFresnel, ...
    modelRem ...
    .constPerUoFAFitted, ...
    allNonFoliageAreasInFirstFresnel, ...
    modelRem ...
    .constPerUoNFAFitted);
allPredictedPathLossesRemLogNFA ...
    = allFreeSpacePathLosses ...
    + modelRemLogNFA ...
    .excessLossFormula( ...
    allFoliageAreasInFirstFresnel, ...
    modelRemLogNFA ...
    .constPerUoFAFitted, ...
    allNonFoliageAreasInFirstFresnel, ...
    modelRemLogNFA ...
    .constPerUoNFAFitted);
allPredictedPathLossesCLPerUoFAndCLPerT ...
    = allFreeSpacePathLosses ...
    + modelCLPerUoFAndCLPerT.excessLossFormula( ...
    allFoliageDepths, ...
    modelCLPerUoFAndCLPerT.constVegFitted, ...
    allNumsOfTreesInFirstFresnel, ...
    modelCLPerUoFAndCLPerT.constEachTrunkFitted);
allPredictedPathLossesCLPerUoWFA ...
    = allFreeSpacePathLosses ...
    + modelCLPerUoWFA ...
    .excessLossFormula( ...
    allWeightedFoliageAreasInFirstFresnel, ...
    modelCLPerUoWFA ...
    .constPerUoWFAFitted);
allPredictedPathLossesLinearLossWrtWFA ...
    = allFreeSpacePathLosses ...
    + modelLinearLossWrtWFA ...
    .excessLossFormula( ...
    allWeightedFoliageAreasInFirstFresnel, ...
    modelLinearLossWrtWFA ...
    .constPerUoWFAFitted, ...
    modelLinearLossWrtWFA.constShiftFitted);
allPredictedPathLossesTwoStepLinearLossWrtWFA ...
    = allFreeSpacePathLosses ...
    + modelTwoStepLinearLossWrtWFA ...
    .excessLossFormula( ...
    allWeightedFoliageAreasInFirstFresnel, ...
    modelTwoStepLinearLossWrtWFA ...
    .constPerUoWFACloseFitted, ...
    modelTwoStepLinearLossWrtWFA ...
    .constPerUoWFAFarFitted, ...
    modelTwoStepLinearLossWrtWFA ...
    .boundaryFitted, ...
    modelTwoStepLinearLossWrtWFA.constShiftFitted);

rmseItu = sqrt(mean((allPredictedPathLossesItu - allMeasPathLosses).^2));
rmseItuBest = sqrt(mean( ...
    (allPredictedPathLossesItuBest - allMeasPathLosses).^2));
rmseItuModForFoliageDepth = sqrt(mean( ...
    (allPredictedPathLossesItuModForFoliageDepth - allMeasPathLosses).^2));
rmseMod = sqrt(mean((allPredictedPathLossesMod - allMeasPathLosses).^2));
rmseCon = sqrt(mean((allPredictedPathLossesCon - allMeasPathLosses).^2));
rmseCLPerUoFAndCLPerT = sqrt(mean( ...
    (allPredictedPathLossesCLPerUoFAndCLPerT - allMeasPathLosses).^2));
rmseTwoStepCon = sqrt(mean( ...
    (allPredictedPathLossesTwoStepCon - allMeasPathLosses).^2));
rmseTwoStepLinearLossWrtFD = sqrt(mean( ...
    (allPredictedPathLossesTwoStepLinearLossWrtFD ...
    - allMeasPathLosses).^2));
rmseTwoStepConFixB = sqrt(mean( ...
    (allPredictedPathLossesTwoStepConFixedB - allMeasPathLosses).^2));
rmseTwoStepCLPerUoFAndCLForDEV = sqrt(mean( ...
    (allPredictedPathLossesTwoStepCLPerUoFAndCLForDEV - allMeasPathLosses).^2));
rmseTwoStepConDeepVeg = sqrt(mean( ...
    (allPredictedPathLossesTwoStepConDeepVeg - allMeasPathLosses).^2));
rmseTwoStepConDeepVegWithTrunks = sqrt(mean( ...
    (allPredictedPathLossesTwoStepConDeepVegWithConstLossEachTrunk ...
    - allMeasPathLosses).^2));
rmseTwoStepCLPerUoFForShallowVegAndCLPerT = sqrt(mean( ...
    (allPredictedPathLossesTwoStepCLPerUoFForShallowVegAndCLPerT ...
    - allMeasPathLosses).^2));
rmseCLPerUoFA = sqrt(mean( ...
    (allPredictedPathLossesCLPerUoFA ...
    - allMeasPathLosses).^2));
rmseCLPerUoFAShifted = sqrt(mean( ...
    (allPredictedPathLossesCLPerUoFAShifted ...
    - allMeasPathLosses).^2));
rmseLinearLossWrtFD = sqrt(mean( ...
    (allPredictedPathLossesLinearLossWrtFD ...
    - allMeasPathLosses).^2));
rmseLinearLossWrtFA = sqrt(mean( ...
    (allPredictedPathLossesLinearLossWrtFA ...
    - allMeasPathLosses).^2));
rmseTwoStepLinearLossWrtFA = sqrt(mean( ...
    (allPredictedPathLossesTwoStepLinearLossWrtFA ...
    - allMeasPathLosses).^2));
rmseTwoStepCLPerUoFA = sqrt(mean( ...
    (allPredictedPathLossesTwoStepCLPerUoFA ...
    - allMeasPathLosses).^2));
rmseCLPerTAndCLPerUoFA = sqrt(mean( ...
    (allPredictedPathLossesCLPerTAndCLPerUoFA ...
    - allMeasPathLosses).^2));
rmseRem = sqrt(mean( ...
    (allPredictedPathLossesRem ...
    - allMeasPathLosses).^2));
rmseRemLogNFA = sqrt(mean( ...
    (allPredictedPathLossesRemLogNFA ...
    - allMeasPathLosses).^2));
rmseCLPerUoWFA = sqrt(mean( ...
    (allPredictedPathLossesCLPerUoWFA ...
    - allMeasPathLosses).^2));
rmseLinearLossWrtWFA = sqrt(mean( ...
    (allPredictedPathLossesLinearLossWrtWFA ...
    - allMeasPathLosses).^2));
rmseTwoStepLinearLossWrtWFA = sqrt(mean( ...
    (allPredictedPathLossesTwoStepLinearLossWrtWFA ...
    - allMeasPathLosses).^2));

% Save the results to a .txt file.
dbLossFormatter = '%3.2f';
fFullPathRmse = fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'RmseComparisonsFoliageDepthBased.txt');
fIdRmse = fopen( fFullPathRmse, 'w');
fprintf(fIdRmse,'Model, RMSE(dB)\n');
% FSPL + ITU
fprintf(fIdRmse, ['FSPL with ITU obstruction by woodland loss, ', ...
    dbLossFormatter, '\r'], ...
    rmseItu);
% FSPL + ITU Best
fprintf(fIdRmse, ...
    ['FSPL with ITU obstruction by woodland loss (best possible), ', ...
    dbLossFormatter, '\r'], ...
    rmseItuBest);
% FSPL + ITU applied to foliage depth
fprintf(fIdRmse, ...
    ['FSPL with ITU model applied to foliage depth, ', ...
    dbLossFormatter, '\r'], ...
    rmseItuModForFoliageDepth);
% FSPL + modified exponential decay
fprintf(fIdRmse, ...
    ['FSPL with Weissberger''s modified exponential decay, ', ...
    dbLossFormatter, '\r'], ...
    rmseMod);
% FSPL + const extra loss per meter of foliage depth
fprintf(fIdRmse, ['FSPL with an extra loss per meter of foliage depth, ', ...
    dbLossFormatter, '\r'], ...
    rmseCon);
% FSPL + extra losses for both foliage areas and trunks
fprintf(fIdRmse, ...
    ['FSPL with an extra loss per meter of foliage depth & a const loss for each trunk, ', ...
    dbLossFormatter, '\r'], ...
    rmseCLPerUoFAndCLPerT);
% FSPL + two-step const extra loss
fprintf(fIdRmse, ...
    ['FSPL with two-step extra loss per meter of foliage depth, ', ...
    dbLossFormatter, '\r'], ...
    rmseTwoStepCon);
% FSPL + linear model with respect to foliage depth
fprintf(fIdRmse, ...
    ['FSPL with linear model with respect to foliage depth, ', ...
    dbLossFormatter, '\r'], ...
    rmseLinearLossWrtFD);
% FSPL + two-step linear model with respect to foliage depth
fprintf(fIdRmse, ...
    ['FSPL with two-step linear model with respect to foliage depth, ', ...
    dbLossFormatter, '\r'], ...
    rmseTwoStepLinearLossWrtFD);
% FSPL + two-step const extra loss with fixed bounary
fprintf(fIdRmse, ...
    ['FSPL with two-step extra loss per meter of foliage depth with fixed boundary, ', ...
    dbLossFormatter, '\r'], ...
    rmseTwoStepConFixB);
% FSPL + two-step const extra loss and const loss for deep enough veg
fprintf(fIdRmse, ...
    ['FSPL with two-step extra loss per meter of foliage depth and const loss for deep enough veg, ', ...
    dbLossFormatter, '\r'], ...
    rmseTwoStepCLPerUoFAndCLForDEV);
% FSPL + two-step const extra loss for deep vegetation
fprintf(fIdRmse, ...
    ['FSPL with two-step extra loss for deep enough vegetation, ', ...
    dbLossFormatter, '\r'], ...
    rmseTwoStepConDeepVeg);
% FSPL + two-step const extra loss for deep vegetation with trunks
fprintf(fIdRmse, ...
    ['FSPL with two-step extra loss for deep enough vegetation & a const loss for each trunk, ', ...
    dbLossFormatter, '\r'], ...
    rmseTwoStepConDeepVegWithTrunks);
% FSPL + two-step const extra loss for shallow vegetation with trunks
fprintf(fIdRmse, ...
    ['FSPL with two-step extra loss for shallow enough vegetation & a const loss for each trunk, ', ...
    dbLossFormatter, '\r'], ...
    rmseTwoStepCLPerUoFForShallowVegAndCLPerT);
% FSPL + const extra loss for unit foliage area in the 1st Fresnel zone
fprintf(fIdRmse, ...
    ['FSPL with const extra loss for unit foliage area in the 1st Fresnel zone, ', ...
    dbLossFormatter, '\r'], ...
    rmseCLPerUoFA);
% FSPL + linear loss with regards to foliage area in the 1st Fresnel zone
fprintf(fIdRmse, ...
    ['FSPL with linear loss with regards to foliage area in the 1st Fresnel zone, ', ...
    dbLossFormatter, '\r'], ...
    rmseLinearLossWrtFA);
% FSPL + linear loss with regards to foliage area in the 1st Fresnel zone
fprintf(fIdRmse, ...
    ['FSPL with two-step linear loss with regards to foliage area in the 1st Fresnel zone, ', ...
    dbLossFormatter, '\r'], ...
    rmseTwoStepLinearLossWrtFA);
% FSPL + two-step const extra loss for unit foliage area in the 1st Fresnel
% zone
fprintf(fIdRmse, ...
    ['FSPL with two-step const extra loss for unit foliage area in the 1st Fresnel zone, ', ...
    dbLossFormatter, '\r'], ...
    rmseTwoStepCLPerUoFA);
% FSPL + const extra loss for unit foliage area in the 1st Fresnel zone and
% const extra loss for each trunk
fprintf(fIdRmse, ...
    ['FSPL with const extra losses for unit foliage area and each trunk in the 1st Fresnel zone, ', ...
    dbLossFormatter, '\r'], ...
    rmseCLPerTAndCLPerUoFA);
% FSPL + const extra loss for unit foliage area in the 1st Fresnel zone and
% const extra loss for each trunk
fprintf(fIdRmse, ...
    ['FSPL with const extra losses for UoFA and UoNFA in the 1st Fresnel zone, ', ...
    dbLossFormatter, '\r'], ...
    rmseRem);
% FSPL + const extra loss for unit weighted foliage area in the 1st Fresnel
% zone
fprintf(fIdRmse, ...
    ['FSPL with const extra loss for unit weighted foliage area in the 1st Fresnel zone, ', ...
    dbLossFormatter, '\r'], ...
    rmseCLPerUoWFA);
% FSPL + const extra loss for linear loss with regards to weighted foliage
% area in the 1st Fresnel zone
fprintf(fIdRmse, ...
    ['FSPL with linear loss with regards to weighted foliage area in the 1st Fresnel zone, ', ...
    dbLossFormatter, '\r'], ...
    rmseLinearLossWrtWFA);
% FSPL + two-step linear loss with regards to weighted foliage area in the
% 1st Fresnel zone
fprintf(fIdRmse, ...
    ['FSPL with two-step linear loss with regards to weighted foliage area in the 1st Fresnel zone, ', ...
    dbLossFormatter, '\r'], ...
    rmseTwoStepLinearLossWrtWFA);

fclose(fIdRmse);

% Open the resulting file via Microsoft Code.
system(['code "' fFullPathRmse '"']);

disp('    Done!')

%% Plots

disp(' ')
disp('    Plotting... ')

% Foliage depths on map.
hFoliageDepthsOnMap = figure; hold on;
plot3(TX_LON, TX_LAT, TX_HEIGHT_M, '^g');
plot3k([allContiPathLossesWithGpsInfo(:,3), ...
    allContiPathLossesWithGpsInfo(:,2), allFoliageDepths], ...
    'PlotType', 'stem');
axis tight; curAxis = axis;
plot_google_map('MapType', 'satellite');
xlabel('Longitude'); ylabel('Latitude'); xticks([]); yticks([]);
zlabel('Foliage Depth (m)'); grid on;
% The command plot_google_map messes up the color legend of plot3k, so we
% will have to fix it here.
hCb = findall( allchild(hFoliageDepthsOnMap), 'type', 'colorbar');
hCb.Ticks = linspace(1,length(colormap)+1,length(hCb.TickLabels));
view(95, 70); axis(curAxis(1:4));

% Excess path loss over path length in woodland.
hExceLossVsPathLenInWoodland = figure; hold on;
plot(allLosDistsInWoodland, allExceLosses, '.');
grid on;
xlabel('Length of Path within Woodland (m)');
ylabel('Excess Path Loss (dB)');

% Excess path loss over foliage depth.
hExceLossVsFoliageDepth = figure; hold on;
plot(allFoliageDepths, allExceLosses, '.');
grid on;
xlabel('Foliage Depth (m)');
ylabel('Excess Path Loss (dB)');

% Excess path loss over foliage depth and trunk number.
hExceLossVsFoliageDepthAndTrunkNum = figure;
plot3k([allFoliageDepths allNumsOfTreesInFirstFresnel allExceLosses]);
grid on;
xlabel('Foliage Depth (m)');
ylabel('Number of Trunks in the 1st Fresnel Zone');
zlabel('Excess Path Loss (dB)');

% Path loss over distance in woodland.
hLossVsWoodlandDist = figure; hold on;
hMeas = plot(allLosDistsInWoodland, allMeasPathLosses, 'ob');
hItu = plot(allLosDistsInWoodland, allPredictedPathLossesItu, '*r');
hItuBest = plot(allLosDistsInWoodland, allPredictedPathLossesItuBest, ...
    '+k');
hTwoStepCLPerUnitOfFoliageDepth = ...
    plot(allLosDistsInWoodland, allPredictedPathLossesTwoStepCon, 'm.');
hTwoStepCLPerUnitOfFoliageDepthFixedB = ...
    plot(allLosDistsInWoodland, ...
    allPredictedPathLossesTwoStepConFixedB, 'y.');
legend([hItu, hItuBest, hTwoStepCLPerUnitOfFoliageDepth, ...
    hTwoStepCLPerUnitOfFoliageDepthFixedB, hMeas], ...
    'ITU Obstruction by Woodland', ...
    'ITU Obstruction by Woodland (Best possible)', ...
    'Two-step const lost per unit of foliage depth', ...
    'Two-step const lost per unit of foliage depth with fixed boundary', ...
    'Measurements', ...
    'Location', 'southeast');
transparentizeCurLegends;
grid on; xlabel('Length of Path within Woodland (m)');
ylabel('Path Loss (dB)');

% Path loss over foliage distance.
hLossVsFoilageDist = figure; hold on;
hMeas = plot(allFoliageDepths, allMeasPathLosses, 'ob');
hMod = plot(allFoliageDepths, allPredictedPathLossesMod, 'xg');
hCon = plot(allFoliageDepths, allPredictedPathLossesCon, '^y');
hItuModForFoliageDepth = plot( ...
    allFoliageDepths, allPredictedPathLossesItuModForFoliageDepth, '+k');
hCLPerUoFAndCLPerT = plot(...
    allFoliageDepths, allPredictedPathLossesCLPerUoFAndCLPerT, '+m');
hTwoStepCon = plot(allFoliageDepths, ...
    allPredictedPathLossesTwoStepCon, '.k');
hTwoStepConFixedB = plot(allFoliageDepths, ...
    allPredictedPathLossesTwoStepConFixedB, '.y');
hTwoStepCLPerUoFAndCLForDEV = plot(allFoliageDepths, ...
    allPredictedPathLossesTwoStepCLPerUoFAndCLForDEV, 'or');
hTwoStepConDeepVeg = plot(allFoliageDepths, ...
    allPredictedPathLossesTwoStepConDeepVeg, '.r');
hTwoStepConDeepVegWithTrunk = plot(allFoliageDepths, ...
    allPredictedPathLossesTwoStepConDeepVegWithConstLossEachTrunk, 'xc');
hTwoStepCLPerUoFForShallowVegAndCLPerT = plot(allFoliageDepths, ...
    allPredictedPathLossesTwoStepCLPerUoFForShallowVegAndCLPerT, 'om');
legend([hItuModForFoliageDepth, hMod, hCon, hCLPerUoFAndCLPerT, ...
    hTwoStepCon, hTwoStepConFixedB, ...
    hTwoStepCLPerUoFAndCLForDEV, ...
    hTwoStepConDeepVeg, hTwoStepConDeepVegWithTrunk, ...
    hTwoStepCLPerUoFForShallowVegAndCLPerT, hMeas], ...
    'ITU style model', ...
    'Weissberger''s modified exponential decay', ...
    'Constant loss per meter of foliage depth', ...
    'Const loss per meter of folaige depth and const loss per trunck', ...
    'Two step constant loss per meter of foliage depth', ...
    'Two step constant loss per meter of foliage depth with fixed boundary', ...
    'Two step constant loss per meter of foliage depth for shallow vegetation', ...
    'Two step constant loss for deep enough vegetation', ...
    'Two step constant loss for deep enough vegetation and each trunk', ...
    'Two step constant loss for shallow enough vegetation and each trunk', ...
    'Measurements', 'Location', 'southeast');
transparentizeCurLegends;
grid on; xlabel('Foliage Depth (m)');
ylabel('Path Loss (dB)');

% Save the figures.
saveas(hFoliageDepthsOnMap, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'FoliageDepthsOnMap.fig'));
saveas(hFoliageDepthsOnMap, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'FoliageDepthsOnMap.png'));

saveas(hExceLossVsPathLenInWoodland, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'ExceLossVsPathLenInWoodland.fig'));
saveas(hExceLossVsPathLenInWoodland, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'ExceLossVsPathLenInWoodland.png'));
saveas(hExceLossVsFoliageDepth, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'ExceLossVsFoliageDepth.fig'));
saveas(hExceLossVsFoliageDepth, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'ExceLossVsFoliageDepth.png'));

saveas(hLossVsWoodlandDist, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'LossVsWoodlandDist.fig'));
saveas(hLossVsWoodlandDist, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'LossVsWoodlandDist.png'));
saveas(hLossVsFoilageDist, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'LossVsFoilageDist.fig'));
saveas(hLossVsFoilageDist, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'LossVsFoilageDist.png'));

% Tree number (z) vs foliage depth (y) vs excess path loss (x).
hTreeNumVsFoliageDepthVsExcePathLoss = figure; hold on;
% Constantly shifted free-space path losses.
plot3k([allExceLosses,  allFoliageDepths, ...
    allNumsOfTreesInFirstFresnel]);
% Grey out the locations with no trunk blockage.
boolsNoTrunkBlk = allNumsOfTreesInFirstFresnel==0;
plot3(allExceLosses(boolsNoTrunkBlk), ...
    allFoliageDepths(boolsNoTrunkBlk), ...
    allNumsOfTreesInFirstFresnel(boolsNoTrunkBlk), ...
    '.', 'Color', ones(1,3).*0.8)
xlabel('Measured Excess Path Loss (dB)'); ylabel('Foliage Depth (m)');
zlabel('Tree Number'); grid on; view([90, -90]);

saveas(hTreeNumVsFoliageDepthVsExcePathLoss, ...
    fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'TreeNumVsFoliageDepthVsExcePathLoss.fig'));
saveas(hTreeNumVsFoliageDepthVsExcePathLoss, ...
    fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'TreeNumVsFoliageDepthVsExcePathLoss.png'));

% Tree number (z) vs number of foliage pixels in the first Fresnel zone (y)
% vs excess path loss (x).
hTreeNumVsNoFPiFFZVsExcePathLoss = figure; hold on;
% Constantly shifted free-space path losses.
plot3k([allExceLosses,  allNumsOfFoliagePixelsInFirstFresnel, ...
    allNumsOfTreesInFirstFresnel]);
% Grey out the locations with no trunk blockage.
boolsNoTrunkBlk = allNumsOfTreesInFirstFresnel==0;
plot3(allExceLosses(boolsNoTrunkBlk), ...
    allNumsOfFoliagePixelsInFirstFresnel(boolsNoTrunkBlk), ...
    allNumsOfTreesInFirstFresnel(boolsNoTrunkBlk), ...
    '.', 'Color', ones(1,3).*0.8)
xlabel('Measured Excess Path Loss (dB)');
ylabel('Number of Foliage Pixels in the 1st Fresnel Zone');
zlabel('Tree Number'); grid on; view([90, -90]);

saveas(hTreeNumVsNoFPiFFZVsExcePathLoss, ...
    fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'TreeNumVsNoFPiFFZVsExcePathLoss.fig'));
saveas(hTreeNumVsNoFPiFFZVsExcePathLoss, ...
    fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'TreeNumVsNoFPiFFZVsExcePathLoss.png'));

disp('    Done!')

%% Generate Figures for Papers

% Generate a simpler version of this model comparison plot, and color the
% measurement results with tree numbers.
allTxRxLosDists = vertcat(txRxLosDists{:});
[sortedLosDist, indicesForSortedDist] = sort(allTxRxLosDists);
allPredictionsConstLossPerTrunk = vertcat(predictionsConstLossPerTrunk{:});

hMeasAndFreeSpaceLossesLogDistSimpColoredByTreeNum ...
    = figure('Unit', 'pixels');
% Enlarge the figure horizontally a little bit.
curFigPos = get(hMeasAndFreeSpaceLossesLogDistSimpColoredByTreeNum, ...
    'Position');
curFigPos(3) = 640;
curFigPos(4) = 420;
set(hMeasAndFreeSpaceLossesLogDistSimpColoredByTreeNum, ...
    'Position', curFigPos);
% Free-space path losses.
hFreeSpace = plot3(sortedLosDist, ...
    allFreeSpacePathLosses(indicesForSortedDist), ...
    ones(size(sortedLosDist)), ...
    '-', 'Color', ones(1,3).*0.7, 'LineWidth', 1);
hold on;
% Measured path losses.
measMarkerSize = 3;
hMeas = plot3(sortedLosDist, ...
    allContiPathLossesWithGpsInfo(indicesForSortedDist,1), ...
    allNumsOfTreesInFirstFresnel(indicesForSortedDist,1), ...
    'ok', 'MarkerSize', measMarkerSize);
maxNumOfTreesInFirstFresnel = max(allNumsOfTreesInFirstFresnel);
[~, hPlot3kAxis, hPlot3kColorbar] = plot3k([sortedLosDist, ...
    allContiPathLossesWithGpsInfo(indicesForSortedDist,1), ...
    allNumsOfTreesInFirstFresnel(indicesForSortedDist,1)], ...
    'Marker', {'o', measMarkerSize}, 'Labels', ...
    {'', 'Distance to TX (m)', 'Path Loss (dB)', '', ''}, ...
    'CBFormat', '%2.0f', 'CBLabels', maxNumOfTreesInFirstFresnel+1);
% Plot3k does not label the colorbar correctly. Fix it manually.
hPlot3kColorbar.Ticks ...
    = (0:maxNumOfTreesInFirstFresnel)./maxNumOfTreesInFirstFresnel;
% Verticle colorbar title.
ylabel(hPlot3kColorbar, 'Number of Trees in the 1st Fresnel Zone ');
% Remove marker face color.
hPlot3kLines = findall(hPlot3kAxis, 'type', 'line');
arrayfun(@(hLine) set(hLine, 'MarkerFaceColor', 'none'), hPlot3kLines);
% Const loss per tree.
hCLperTree ...
    = plot3(sortedLosDist, ...
    allPredictionsConstLossPerTrunk(indicesForSortedDist), ...
    100.*ones(size(sortedLosDist)), '.r', ...
    'MarkerSize', 8);
% % We will keep using the fixed-boundary verison.
% hTwoStepCLPerUnitOfFoliageDepth = ...
%     plot3(sortedLosDist, ...
%      allPredictedPathLossesTwoStepCon(indicesForSortedDist), ...
%     -100.*ones(size(sortedLosDist)), ...
%      'g+', 'MarkerSize', 4);
% % Two-step const lost per unit of foliage area in the 1st Fresnel zone %
% model. hTwoStepCLperUoFA ...
%     = plot3(sortedLosDist, ...
%      allPredictedPathLossesTwoStepLinearLossWrtFA(indicesForSortedDist),
%      ...
%     -100.*ones(size(sortedLosDist)), 'x', 'Color', ones(1,3).*0.6, ...
%      'MarkerSize', measMarkerSize);
hCurLegend = legend([hMeas, hFreeSpace, ...
    hCLperTree], ... hTwoStepCLPerUnitOfFoliageDepth], ...
    'Measurements colored by tree number', ...
    'Free-space path loss (FSPL)', ...
    'FSPL with a constant loss per tree', ...
    ... 'Site-specific model A-I', ...
    'Location', 'northwest');
axis tight; transparentizeCurLegends; view(2); set(gca, 'xscale','log');
grid on; grid minor;
% Manually set the x tick labels.
xticks([10, 20, 30, 50, 100, 200]);
xticklabels(arrayfun(@(x) {num2str(x)}, xticks'));
saveas(hMeasAndFreeSpaceLossesLogDistSimpColoredByTreeNum, ...
    fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'MeasAndFreeSpaceLossesAndShiftedOverLogDist_Simplified_ColoredByTreeNum.fig'));
saveas(hMeasAndFreeSpaceLossesLogDistSimpColoredByTreeNum, ...
    fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'MeasAndFreeSpaceLossesAndShiftedOverLogDist_Simplified_ColoredByTreeNum.png'));

% Export an .eps copy for papers.
pathToSavePaperFigs = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', '1_EpsFigs');
saveEpsFigForPaper(hMeasAndFreeSpaceLossesLogDistSimpColoredByTreeNum, ...
    fullfile(pathToSavePaperFigs, ...
    ['4_1_1_', ...
    'MeasAndFreeSpaceLossesAndShiftedOverLogDist_Simplified_ColoredByTreeNum.eps']));

hItuPerformance = figure; hold on;
[~, indicesForSortedDistInWoodLand] = sort(allLosDistsInWoodland);
hFreeSpace = plot( ...
    allLosDistsInWoodland(indicesForSortedDistInWoodLand), ...
    allFreeSpacePathLosses(indicesForSortedDistInWoodLand), '-', ...
    'Color', ones(1,3).*0.7, 'LineWidth', 1);
hMeas = plot(allLosDistsInWoodland, allMeasPathLosses, 'ob', ...
    'MarkerSize', 3);
% We will keep using the fixed-boundary verison.
hTwoStepCLPerUnitOfFoliageDepth = ...
    plot(allLosDistsInWoodland, allPredictedPathLossesTwoStepCon, ...
    'g*', 'MarkerSize', 4);
% hTwoStepLinearLossWrtFA = ...
%     plot(allLosDistsInWoodland,
%     allPredictedPathLossesTwoStepLinearLossWrtFA, ...
%      'g*', 'MarkerSize', 4);
hItu = plot(allLosDistsInWoodland, allPredictedPathLossesItu, '.r', ...
    'MarkerSize', 8);
legend([hMeas, hFreeSpace, hItu, hTwoStepCLPerUnitOfFoliageDepth ... % hTwoStepCLPerUnitOfFoliageDepth ...
    ], ...
    'Measurements', ...
    'FSPL', ...
    'ITU obstruction by woodland', ...
    'Site-specific model A-I', ...
    'Location', 'southeast');
transparentizeCurLegends; axis tight; ylim([60 195]);
grid on; grid minor; xlabel('Length of Path within Woodland \it{d_w} \rm{(m)}');
ylabel('Path Loss (dB)');

% Export an .eps copy for papers.
pathToSavePaperFigs = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', '1_EpsFigs');
saveEpsFigForPaper(hItuPerformance, ...
    fullfile(pathToSavePaperFigs, ...
    ['7_', ...
    'ItuPerformance_MeasVsLengthOfPathInWoodland.eps']));

hWeissPerformance = figure; hold on;
[~, indicesForSortedFoliageDepth] = sort(allFoliageDepths);
% FSPL with measurements.
hFreeSpace = plot( ...
    allFoliageDepths(indicesForSortedFoliageDepth), ...
    allFreeSpacePathLosses(indicesForSortedFoliageDepth), 'x', ...
    'Color', ones(1,3).*0.7, 'MarkerSize', 4);
hMeas = plot(allFoliageDepths, allMeasPathLosses, 'ob', ...
    'MarkerSize', 3);
% A-I: Two-step const losses per unit of foliage depth.
hTwoStepCon = plot(allFoliageDepths, ...
    allPredictedPathLossesTwoStepCon, 'g+', ...
    'MarkerSize', 4);
alpha(0.5);
% Weissberger's model.
hWeissberge = plot(allFoliageDepths, allPredictedPathLossesMod, '.r', ...
    'MarkerSize', 6);
legend([hMeas, hFreeSpace, hWeissberge, hTwoStepCon], ...
    'Measurements', ...
    'FSPL', ...
    'Weissberger''s model', ...
    'Site-specific model A-I', ...
    'Location', 'southeast');
transparentizeCurLegends;
grid on; grid minor; axis tight; xlabel('Foliage Depth \it{d_f} \rm{(m)}');
ylabel('Path Loss (dB)');

% Export an .eps copy for papers.
pathToSavePaperFigs = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', '1_EpsFigs');
saveEpsFigForPaper(hWeissPerformance, ...
    fullfile(pathToSavePaperFigs, ...
    ['8_1_', ...
    'WeissbergerPerformance_MeasVsFoliageDepth.eps']));

hSiteSpecificModels = figure; hold on;
% FSPL with measurements.
hFreeSpace = plot( ...
    allFoliageDepths(indicesForSortedFoliageDepth), ...
    allFreeSpacePathLosses(indicesForSortedFoliageDepth), 'x', ...
    'Color', ones(1,3).*0.7, 'MarkerSize', 4);
hMeas = plot(allFoliageDepths, allMeasPathLosses, 'ob', ...
    'MarkerSize', 3);
% C: Two step linear for foliage area.
hTwoStepLinearWrtFA = plot( ...
    allFoliageDepths, allPredictedPathLossesTwoStepLinearLossWrtFA, ...
    '*k', ...
    'MarkerSize', 4);
% A-I: Two-step const losses per unit of foliage depth.
hTwoStepCon = plot(allFoliageDepths, ...
    allPredictedPathLossesTwoStepCon, '+g', ...
    'MarkerSize', 4);
alpha(0.5);
% A-II: Two-step const loss per unit of foliage depth + const loss for deep
% enough vegetation.
hTwoStepCLPerUoFAndCLForDEV = plot(allFoliageDepths, ...
    allPredictedPathLossesTwoStepCLPerUoFAndCLForDEV, 'xy', ...
    'MarkerSize', 4);
% B: ITU style.
hItuModForFoliageDepth = plot( ...
    allFoliageDepths, allPredictedPathLossesItuModForFoliageDepth, ...
    '.r', ...
    'MarkerSize', 6);
legend([hMeas, hFreeSpace, hTwoStepCon, ...
    hTwoStepCLPerUoFAndCLForDEV, hItuModForFoliageDepth, ...
    hTwoStepLinearWrtFA], ...
    'Measurements', ...
    'FSPL', ...
    'Site-specific model A-I', ...
    'Site-specific model A-II', ...
    'Site-specific model B', ...
    'Site-specific model C', ...
    'Location', 'southeast');
transparentizeCurLegends; axis tight;
% Extend the yaxis a little bit to avoid blockage by the legends.
curAxis = axis; curAxis(3) = 65;
axis(curAxis);
grid on; grid minor; xlabel('Foliage Depth \it{d_f} \rm{(m)}');
ylabel('Path Loss (dB)');

% Export an .eps copy for papers.
pathToSavePaperFigs = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', '1_EpsFigs');
saveEpsFigForPaper(hSiteSpecificModels, ...
    fullfile(pathToSavePaperFigs, ...
    ['8_2_', ...
    'SiteSpecModels_MeasVsFoliageDepth.eps']));

%% Evaluate the RMSEs for Publication

% ITU model.
ituModelPerfTable = computeRmsesForDistSegs( ...
    segmentsForRmseDw, allLosDistsInWoodland, allMeasPathLosses, ...
    {'FSPL', allFreeSpacePathLosses; ...
    'ITU', allPredictedPathLossesItu; ...
    'A_TwoStepCon', allPredictedPathLossesTwoStepCon; ...
    'A_1_TwoStepConFixedB', allPredictedPathLossesTwoStepConFixedB; ...
    'A_2_TwoStepCLPerUoFAndCLForDEV', allPredictedPathLossesTwoStepCLPerUoFAndCLForDEV; ...
    'A_LinearLossWrtFD', allPredictedPathLossesLinearLossWrtFD; ...
    'A_TwoStepLinearLossWrtFD', allPredictedPathLossesTwoStepLinearLossWrtFD; ...
    'B', allPredictedPathLossesItuModForFoliageDepth; ...
    'C_LinearLossWrtFA', allPredictedPathLossesLinearLossWrtFA; ...
    'C_TwoStepLinearLossWrtFA', allPredictedPathLossesTwoStepLinearLossWrtFA});
fFullPathRmse = fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'RmseByDistSegsItu.txt');
writetable(ituModelPerfTable, fFullPathRmse);
disp(ituModelPerfTable);

% Weissberger's model.
weisModelPerfTable = computeRmsesForDistSegs( ...
    segmentsForRmseDf, allFoliageDepths, allMeasPathLosses, ...
    {'FSPL', allFreeSpacePathLosses; ...
    'Weis', allPredictedPathLossesMod; ...
    'A_TwoStepCon', allPredictedPathLossesTwoStepCon; ...
    'A_1_TwoStepConFixedB', allPredictedPathLossesTwoStepConFixedB; ...
    'A_2_TwoStepCLPerUoFAndCLForDEV', allPredictedPathLossesTwoStepCLPerUoFAndCLForDEV; ...
    'A_LinearLossWrtFD', allPredictedPathLossesLinearLossWrtFD; ...
    'A_TwoStepLinearLossWrtFD', allPredictedPathLossesTwoStepLinearLossWrtFD; ...
    'B', allPredictedPathLossesItuModForFoliageDepth; ...
    'C_LinearLossWrtFA', allPredictedPathLossesLinearLossWrtFA; ...
    'C_TwoStepLinearLossWrtFA', allPredictedPathLossesTwoStepLinearLossWrtFA});
fFullPathRmse = fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'RmseByDistSegsWeis.txt');
writetable(weisModelPerfTable, fFullPathRmse);
disp(weisModelPerfTable);

% Overall.
overallModelPerfTable = computeRmsesForDistSegs( ...
    {[0, inf]}, allTxRxLosDists, allMeasPathLosses, ...
    {'FSPL', allFreeSpacePathLosses; ...
    'AF', allPredictionsConstLossPerTrunk; ...
    'ITU', allPredictedPathLossesItu; ...
    'Weis', allPredictedPathLossesMod; ...
    'A_TwoStepCon', allPredictedPathLossesTwoStepCon; ...
    'A_1_TwoStepConFixedB', allPredictedPathLossesTwoStepConFixedB; ...
    'A_2_TwoStepCLPerUoFAndCLForDEV', allPredictedPathLossesTwoStepCLPerUoFAndCLForDEV; ...
    'A_LinearLossWrtFD', allPredictedPathLossesLinearLossWrtFD; ...
    'A_TwoStepLinearLossWrtFD', allPredictedPathLossesTwoStepLinearLossWrtFD; ...
    'B', allPredictedPathLossesItuModForFoliageDepth; ...
    'C_LinearLossWrtFA', allPredictedPathLossesLinearLossWrtFA; ...
    'C_TwoStepLinearLossWrtFA', allPredictedPathLossesTwoStepLinearLossWrtFA});
fFullPathRmse = fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'RmseOverall.txt');
writetable(overallModelPerfTable, fFullPathRmse);
disp(overallModelPerfTable);

%% Try Modifying the Boundary and Plot the Regional Trends

minIntDw = floor(min(allLosDistsInWoodland));
maxIntDw = ceil(max(allLosDistsInWoodland));

% ITU model. 
%   First we need to build the Dw ranges.
%       We are going to test the Dw ranges from:
%           {[0 m+1], [m+1 m+2], [m+2 inf]}
%       to:
%           {[0 M-2], [M-2 M-1], [M-1 inf]}.
numSegForPerfTrendDw = (maxIntDw-2)-(minIntDw+1)+1;
segmentsForPerfTrendDw = cell(numSegForPerfTrendDw, 1);
for idxSegDw = 1:numSegForPerfTrendDw
    segmentsForPerfTrendDw{idxSegDw} = {[0 minIntDw+idxSegDw], ...
        [minIntDw+idxSegDw minIntDw+idxSegDw+1], ...
        [minIntDw+idxSegDw+1 inf]};
end
% Define all models of interest.
cellAllPredictsDw = { ... 'FSPL', allFreeSpacePathLosses; ...
    'ITU obstruction by woodland', allPredictedPathLossesItu; ...
    ... 'A_TwoStepCon', allPredictedPathLossesTwoStepCon; ...
    'Site-specific model A-1', allPredictedPathLossesTwoStepConFixedB; ...
    'Site-specific model A-2', allPredictedPathLossesTwoStepCLPerUoFAndCLForDEV; ...
    ... 'A_LinearLossWrtFD', allPredictedPathLossesLinearLossWrtFD; ...
    ... 'A_TwoStepLinearLossWrtFD', allPredictedPathLossesTwoStepLinearLossWrtFD; ...
    'Site-specific model B', allPredictedPathLossesItuModForFoliageDepth; ...
    ... 'C_LinearLossWrtFA', allPredictedPathLossesLinearLossWrtFA; ...
    'Site-specific model C', allPredictedPathLossesTwoStepLinearLossWrtFA};
[numOfModelsDw, ~] = size(cellAllPredictsDw);
% Compute the RMSEs.
rmsesCloseMidFarAllModelsDw = cell(numOfModelsDw, 1);
for idxModDw = 1:numOfModelsDw
    rmsesCloseMidFarAllModelsDw{idxModDw} = nan(numSegForPerfTrendDw,3);
end
for idxSegDw = 1:numSegForPerfTrendDw
    [~, ituModelPerfTrendCell] = computeRmsesForDistSegs( ...
        segmentsForPerfTrendDw{idxSegDw}, ...
        allLosDistsInWoodland, allMeasPathLosses, ...
        cellAllPredictsDw);
    for idxModDw = 1:numOfModelsDw
        rmsesCloseMidFarAllModelsDw{idxModDw}(idxSegDw, :) ...
            = [ituModelPerfTrendCell{idxModDw, 2:4}];
    end
end

markersForPlotting = {'.-', '-', '-.', '--', ':'};
markersForPlottingWithMod = markersForPlotting([end 1:(end-1)]);
lineWith = 1;

% Plot.
hFigRmseCloseTrendItu = figure; hold on;
xsToPlot = (minIntDw+1):(maxIntDw-2);
 
for idxModDw = 1:numOfModelsDw
   plot(xsToPlot, ...
       rmsesCloseMidFarAllModelsDw{idxModDw}(:,1), ...
       markersForPlottingWithMod{1+mod(idxModDw, ...
       length(markersForPlottingWithMod))}, ...
       'LineWidth', lineWith);
end
grid on; grid minor; 
curAxis = axis;
axis([0 xsToPlot(end) curAxis(3:4)]);
legend(cellAllPredictsDw(1:end, 1), 'Location', 'southeast');
xlabel('Upper Bound of Within-Woodland Path Length x (m)');
ylabel('RMES for Within-Woodland Path Length Range [0, x)');

hFigRmseMiddleTrendItu = figure; hold on;
xsToPlot = (minIntDw+1):(maxIntDw-2);
for idxModDw = 1:numOfModelsDw
   plot(xsToPlot, ...
       rmsesCloseMidFarAllModelsDw{idxModDw}(:,2), ...
       markersForPlottingWithMod{1+mod(idxModDw, ...
       length(markersForPlottingWithMod))}, ...
       'LineWidth', lineWith);
end
grid on; grid minor; 
curAxis = axis;
axis([0 xsToPlot(end) curAxis(3:4)]);
legend(cellAllPredictsDw(1:end, 1), 'Location', 'southeast');
xlabel('Lower Bound of Within-Woodland Path Length x (m)');
ylabel('RMES for Within-Woodland Path Length Range [x, x+1)');

hFigRmseFarTrendItu = figure; hold on;
xsToPlot = (minIntDw+2):(maxIntDw-1);
for idxModDw = 1:numOfModelsDw
   plot(xsToPlot, ...
       rmsesCloseMidFarAllModelsDw{idxModDw}(:,3), ...
       markersForPlottingWithMod{1+mod(idxModDw, ...
       length(markersForPlottingWithMod))}, ...
       'LineWidth', lineWith);
end
grid on; grid minor;
curAxis = axis;
axis([0 xsToPlot(end) curAxis(3:4)]);
legend(cellAllPredictsDw(1:end, 1), 'Location', 'northeast');
xlabel('Lower Bound of Within-Woodland Path Length x (m)');
ylabel('RMES for Within-Woodland Path Length Range [x, inf)');

saveas(hFigRmseCloseTrendItu, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'ItuRmseTrendClose.png'));
saveas(hFigRmseMiddleTrendItu, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'ItuRmseTrendMid.png'));
saveas(hFigRmseFarTrendItu, fullfile(ABS_PATH_TO_SAVE_PLOTS, ...
    'ItuRmseTrendFar.png'));

%% Windowed/Regional RMSE

windowSizeInMItu = 10;
windowSizeInMWeis = 10;
numXPtsToPlot = 1000;
figureSize = [560 270.5]; % [x y] in pixel.

% For ITU.
xPtsToPlotItu = linspace(...
    minIntDw+windowSizeInMItu/2, maxIntDw-windowSizeInMItu/2, ...
    numXPtsToPlot);
segmentsOfInterestItu = arrayfun(@(x) ...
    [x-windowSizeInMItu/2, x+windowSizeInMItu/2], ...
    xPtsToPlotItu, 'UniformOutput', false);
% Compute the RMSEs.
[~, regionalRmsesItuCell] = computeRmsesForDistSegs( ...
    segmentsOfInterestItu, ...
    allLosDistsInWoodland, allMeasPathLosses, ...
    cellAllPredictsDw);
% Plot
hFigRegionalRmsesItu = figure; hold on;
curFigPos = get(hFigRegionalRmsesItu, 'Position');
set(hFigRegionalRmsesItu, 'Position', [curFigPos(1:2) figureSize]);
refRmsesToPlotItu = [regionalRmsesItuCell{1, 2:end}];
for idxModDw = 2:numOfModelsDw
   curRmsesToPlotItu = [regionalRmsesItuCell{idxModDw, 2:end}];
   plot(xPtsToPlotItu, refRmsesToPlotItu-curRmsesToPlotItu, ...
       markersForPlottingWithMod{1+mod(idxModDw, ...
       length(markersForPlottingWithMod))}, ...
       'LineWidth', lineWith);
end
grid on; grid minor;
curAxis = axis; maxAbsY = max(abs(curAxis(3:4)));
axis([xPtsToPlotItu(1) xPtsToPlotItu(end) -maxAbsY maxAbsY]);
legend(cellAllPredictsDw(2:end, 1), ...
    'Location', 'south', 'AutoUpdate', 'off');
xlabel('Length of Path within Woodland \it{d_w} \rm{(m)}');
ylabel({'Regional RMSE (dB)'; ...
    'Improvement over ITU'});
% Manully highlight the xaxis.
hXAxis = plot([0 maxIntDw], [0 0], 'k-');
uistack(hXAxis, 'bottom');

% Export an .eps copy for papers.
pathToSavePaperFigs = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', '1_EpsFigs');
saveEpsFigForPaper(hFigRegionalRmsesItu, ...
    fullfile(pathToSavePaperFigs, ...
    ['9_1_', ...
    'RegionalRmseImprovementOverItu.eps']));

% For Weissberger.
cellAllPredictsDf = { ...'FSPL', allFreeSpacePathLosses; ...
    ... 'AF', allPredictionsConstLossPerTrunk; ...
    ... 'ITU', allPredictedPathLossesItu; ...
    'Weissberger''s model', allPredictedPathLossesMod; ...
    ... 'A_TwoStepCon', allPredictedPathLossesTwoStepCon; ...
    'Site-specific model A-1', allPredictedPathLossesTwoStepConFixedB; ...
    'Site-specific model A-2', allPredictedPathLossesTwoStepCLPerUoFAndCLForDEV; ...
    ... 'A_LinearLossWrtFD', allPredictedPathLossesLinearLossWrtFD; ...
    ... 'A_TwoStepLinearLossWrtFD', allPredictedPathLossesTwoStepLinearLossWrtFD; ...
    'Site-specific model B', allPredictedPathLossesItuModForFoliageDepth; ...
    ... 'C_LinearLossWrtFA', allPredictedPathLossesLinearLossWrtFA; ...
    'Site-specific model C', allPredictedPathLossesTwoStepLinearLossWrtFA};
[numOfModelsDf, ~] = size(cellAllPredictsDf);

minIntDf = floor(min(allFoliageDepths));
maxIntDf = ceil(max(allFoliageDepths));

xPtsToPlotWeis = linspace(...
    minIntDf+windowSizeInMWeis/2, maxIntDf-windowSizeInMWeis/2, ...
    numXPtsToPlot);
segmentsOfInterestWies = arrayfun(@(x) ...
    [x-windowSizeInMWeis/2, x+windowSizeInMWeis/2], ...
    xPtsToPlotWeis, 'UniformOutput', false);
% Compute the RMSEs.
[~, regionalRmsesWeisCell] = computeRmsesForDistSegs( ...
    segmentsOfInterestWies, ...
    allFoliageDepths, allMeasPathLosses, ...
    cellAllPredictsDf);
% Plot
hFigRegionalRmsesWeis = figure; hold on;
curFigPos = get(hFigRegionalRmsesWeis, 'Position');
set(hFigRegionalRmsesWeis, 'Position', [curFigPos(1:2) figureSize]);
refRmsesToPlotWeis = [regionalRmsesWeisCell{1, 2:end}];
for idxModDf = 2:numOfModelsDf
   curRmsesToPlotWeis = [regionalRmsesWeisCell{idxModDf, 2:end}];
   plot(xPtsToPlotWeis, refRmsesToPlotWeis-curRmsesToPlotWeis, ...
       markersForPlottingWithMod{1+mod(idxModDf, ...
       length(markersForPlottingWithMod))}, ...
       'LineWidth', lineWith);
end
grid on; grid minor;
% Manually adjust the visible area.
%    curAxis = axis; maxAbsY = max(abs(curAxis(3:4)));
%     axis([xPtsToPlotWeis(1) xPtsToPlotWeis(end) -maxAbsY maxAbsY]);
axis([xPtsToPlotWeis(1) xPtsToPlotWeis(end) -7 7]);
legend(cellAllPredictsDw(2:end, 1), ...
    'Location', 'south', 'AutoUpdate', 'off');
xlabel('Foliage Depth \it{d_f} \rm{(m)}');
ylabel({'Regional RMSE (dB)'; ...
    'Improvement over WMED'});
% Manully highlight the xaxis.
hXAxis = plot([0 maxIntDf], [0 0], 'k-');
uistack(hXAxis, 'bottom');

% Export an .eps copy for papers.
pathToSavePaperFigs = fullfile(ABS_PATH_TO_NIST_SHARED_FOLDER, ...
    'PostProcessingResults', '1_EpsFigs');
saveEpsFigForPaper(hFigRegionalRmsesWeis, ...
    fullfile(pathToSavePaperFigs, ...
    ['9_2_', ...
    'RegionalRmseImprovementOverWeis.eps']));

% EOF