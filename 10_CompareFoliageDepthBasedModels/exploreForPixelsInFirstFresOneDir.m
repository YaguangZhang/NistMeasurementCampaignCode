function [ firstFresZoneArea ] ....
    = exploreForPixelsInFirstFresOneDir( ...
    firstFresZoneArea, startPixelCoors, dirNorm, ...
    srcUtmPt3D, dstUtmPt3D, ...
    VEG_AREA_IMG_META, fCarrierGHz)
%EXPLOREFORPIXELSINFIRSTFRESONEDIR Explore one direction for pixels in the
%1s Fresnel zone for the foliage analysis.
%
% We will go as far as we can until a pixel that is out of the zone is
% encountered.
%
% Inputs:
%   - firstFresZoneArea
%     The known mapping for the pixels. 1: It is a pixel in the 1st Fresnel
%     zone.
%   - startPixelCoors
%     The pixel coordinates for the exploration starting point, in the form
%     of [cx, cy]. Note that we have followed the image processing
%     convention for indexing.
%   - dirNorm
%     The pixel coordinates for stepping the exploration. Note that we have
%     followed the image processing convention for indexing. For example,
%     [1, 0] will step right one pixel for each step of exploration. It
%     should be one of [1, 0] (right), [-1, 0] (left), [0, 1] (down) and
%     [0, -1] (up).
%   - srcUtmPt3D, dstUtmPt3D
%     The source and destination points (3x1 vectors) in (x, y, alt).
%   - VEG_AREA_IMG_META
%     The meta information for the image structure reprenting the
%     vegetation area, e.g. generated by:
%         9_GenerateVegAreas/generateVegAreas.m
%   - fCarrierGHz
%     The signal frequency in GHz.
%
% Output:
%   - firstFresZoneArea
%     The updated boolean matrix indicating which pixels are in the 1st
%     Fresnel zone.
%
% Yaguang Zhang, Purdue, 09/24/2018

assert(firstFresZoneArea(startPixelCoors(2), startPixelCoors(1))==1, ...
    'The starting point should be in the zone!');

curPixelCoors = startPixelCoors+dirNorm;
doneExp = false;
while ~doneExp
    if curPixelCoors(1)<1 || curPixelCoors(2)<1 ...
            || curPixelCoors(1)>VEG_AREA_IMG_META.IMG_RESOLUTION(1) ...
            || curPixelCoors(2)>VEG_AREA_IMG_META.IMG_RESOLUTION(2)
        % Out of the image range. Done exploring.
        doneExp = true;
    elseif ~isnan(firstFresZoneArea( ...
            curPixelCoors(2), curPixelCoors(1)))
        % The pixel is explored.
        if firstFresZoneArea( ...
                curPixelCoors(2), curPixelCoors(1)) == 0
            % And it is already out of the zone. Done exploring.
            doneExp = true;
        else
            % The pixel is in the zone. Keep exploring more.
            curPixelCoors = curPixelCoors+dirNorm;
        end
    else
        % The pixel is not explored yet. Find its location in 3D.
        pixelLoc3D = [VEG_AREA_IMG_META.XS( ...
            curPixelCoors(2), curPixelCoors(1)), ...
            VEG_AREA_IMG_META.YS( ...
            curPixelCoors(2), curPixelCoors(1)), ...
            VEG_AREA_IMG_META.ZS( ...
            curPixelCoors(2), curPixelCoors(1))];
        
        % Reuse the count tree function. The result will be 1 (yes, in the
        % zone) or 0 (no, not in the zone).
        boolInFirstFresnel ...
            = countNumOfTreesInFirstFresnelZone( ...
            srcUtmPt3D, dstUtmPt3D, pixelLoc3D, ...
            fCarrierGHz);
        
        firstFresZoneArea( ...
            curPixelCoors(2), curPixelCoors(1)) = boolInFirstFresnel;
        if ~boolInFirstFresnel
            % Have covered beyond the in zone area. Done exploring.
            doneExp = true;
        else
            % Still need to explore more.
            curPixelCoors = curPixelCoors+dirNorm;
        end
    end
end

end

% EOF