function [ markLocs, marksCell, allMarksCell ] ...
    = loadGpsMarkers(fullPath, titleRegexFilter, ...
    pathToSave)
% LOADGPSMARKERS Load GPS markers from the .csv file generated by the
% Android app Map Marker.
%
% We have manually labeled the TX, together with trees in the measured
% area, using the app. This function is used to load the corresponding GPS
% data.
%
% Inputs:
%   - fullPath
%     The absolute path to the .csv file to load.
%   - titleRegexFilter
%     A string representing the regex pattern to match the marker titles as
%     a filter.
%   - pathToSave
%     The .mat file location to save the results.
%
% Output:
%   - markLocs
%     A matrix for all the tree locations, with each row being the [lat,
%     lon, alt] for one tree.
%   - marksCell
%     A cell with all the information for the marker loaded.
%   - allMarksCell
%     A cell with all the information available in the .csv file, including
%     the header.
%
% Yaguang Zhang, Purdue, 04/16/2018

% Google may not always respond with valid alt values. We will try up to a
% constant number of times before giving up.
MAX_NUM_OF_TRIALS_FOR_ALT = 10;

parentDirToSave = fileparts(pathToSave);
% Create directories if necessary.
if exist(parentDirToSave, 'dir')~=7
    mkdir(parentDirToSave);
end

% Reuse the history results if possible.
if exist(pathToSave, 'file')==2
    load(pathToSave);
    lats = markLocs(:,1);
    lons = markLocs(:,2);
    alts = markLocs(:,3);
else
    allMarksCell = csvimport(fullPath);
    [lats, lons, names] = csvimport(fullPath, ...
        'columns', {'Latitude', 'Longitude', 'Title'});
    % Filter the rows according to the marker titles.
    boolsMarkesToKeep = cellfun(...
        @(n) ~isempty(regexp(n, titleRegexFilter)), names);
    lats = lats(boolsMarkesToKeep);
    lons = lons(boolsMarkesToKeep);
    % Remove the header line.
    marksCell = allMarksCell(2:end,:);
    marksCell = marksCell(boolsMarkesToKeep,:);
    
    alts = nan(length(lats), 1);
end

% Fetch alts from Google if necessary.
indicesNanAlts = find(isnan(alts))';
for curIdxNanAlt = indicesNanAlts
    flagFetchSuccess = false;
    numFetchErrs = 0;
    while (~flagFetchSuccess) && numFetchErrs<MAX_NUM_OF_TRIALS_FOR_ALT
        try
            alts(curIdxNanAlt) ...
                = getElevations(lats(curIdxNanAlt), lons(curIdxNanAlt));
            flagFetchSuccess = true;
        catch
            numFetchErrs = numFetchErrs+1;
        end
    end
    
    if ~flagFetchSuccess
        disp(['Sample with invalid alt: ', ...
            num2str(find(indicesNanAlts==curIdxNanAlt)), ...
            '/', num2str(length(indicesNanAlts))]);
        warning(['Unable to fetch alt for location #', ...
            num2str(curIdxNanAlt)]);
    end
end

% Construct markLocs.
markLocs = [lats, lons, alts];

% Save the results.
save(pathToSave, ...
    'markLocs', 'marksCell', ...
    'allMarksCell');
end
% EOF