function [ timeNsInPlots, signalAmpInPlots, lowPassedSigsInPlot, ...
    plotFileNames, sampIndexRanges ] ...
    = inspectPdps(dataTag, allSigOutFiles, absPathToSavePlot, ...
    indicesPlotsToSaveFigCopies, F_S, flagGenerateNoiseEliDebugFig)
%INSPECTPDPS Generate PDP .png images for signal recording .out files.
%
%   Inputs:
%       - dataTag
%         A short string to briefly characterize/describe what data are
%         beening inspected.
%       - allSigOutFiles
%         A structure array generated by rdir to specify where the .out
%         files are.
%       - absPathToSavePlot
%         The absolute path to save plots.
%       - indicesPlotsToSaveFigCopies
%         A column array with indices for the .out files specifed by
%         allSigOutFiles to be also saved as .fig copies.
%       - F_S
%         The GnuRadio sample rate for the singal recordings. The x axis
%         will be converted from sample # to time accordingly.
%       - flagGenerateNoiseEliDebugFig
%         Set this to be true if it is necessary to generate the debug plot
%         for noise elimination.
%
%   Outputs:
%       - timeNsInPlots, signalAmpInPlots
%         The time points in ns and the corresponding signal amplitude for
%         data shown in the generated plots.
%       - lowPassedSigsInPlot
%         The low-passed filtered signals.
%       - plotFileNames
%         The filenames used for saving the plots.
%
% Update 06/06/2018: Also returned the data in the plots for future
% analysis if necessary.
%
% Yaguang Zhang, Purdue, 04/30/2018

if ~exist('flagGenerateNoiseEliDebugFig', 'var')
    flagGenerateNoiseEliDebugFig = false;
end

disp(['inspectPdps: Processing ', dataTag, ' data...']);
LogicalStr = {'false', 'true'};
disp(['             flagGenerateNoiseEliDebugFig is set to be ', ...
    LogicalStr{flagGenerateNoiseEliDebugFig+1}]);

numSigOutFiles = length(allSigOutFiles);

[timeNsInPlots, signalAmpInPlots, lowPassedSigsInPlot, ...
    sampIndexRanges, plotFileNames] ...
    = deal(cell(numSigOutFiles,1));

for idxSig = 1:numSigOutFiles
    disp(['             ', num2str(idxSig), '/', num2str(numSigOutFiles)]);
    
    lowPassedSigsInPlot{idxSig} = nan;
    
    if exist('F_S', 'var')        
        [hPdpFig, timeNsInPlots{idxSig}, ...
            signalAmpInPlots{idxSig}, ...
            lowPassedSigsInPlot{idxSig}, sampIndexRanges{idxSig}, ...
            hNoiseEliDebugFig] ...
            = plotPdpsForOneRec(allSigOutFiles(idxSig), F_S, nan, ...
            flagGenerateNoiseEliDebugFig);
    end
    
    plotFileNames{idxSig} ...
        = ['PdpOverview_', dataTag, '_', num2str(idxSig)];
    
    % Save the PDP figure.
    saveas(hPdpFig, fullfile(absPathToSavePlot, ...
        [plotFileNames{idxSig}, '.png']));
    % Also save a .fig copy if necessary.
    if ismember(idxSig, indicesPlotsToSaveFigCopies)
        saveas(hPdpFig, fullfile(absPathToSavePlot, ...
            [plotFileNames{idxSig}, '.fig']));
    end
    close(hPdpFig); 
    
    % Save the noise elimination figure.
    saveas(hNoiseEliDebugFig, fullfile(absPathToSavePlot, ...
        [plotFileNames{idxSig}, '_DynamicNoiseEli.png']));
    % Also save a .fig copy if necessary.
    if ismember(idxSig, indicesPlotsToSaveFigCopies)
        saveas(hNoiseEliDebugFig, fullfile(absPathToSavePlot, ...
            [plotFileNames{idxSig}, '_DynamicNoiseEli.fig']));
    end
    close(hNoiseEliDebugFig); 
end
%EOF